// Generated from ComposeLexer.g4 by ANTLR 4.11.2-SNAPSHOT
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
import {
	ATN,
	ATNDeserializer,
	CharStream,
	DecisionState, DFA,
	Lexer,
	LexerATNSimulator,
	RuleContext,
	PredictionContextCache,
	Token
} from "antlr4";
export default class ComposeLexer extends Lexer {
	public static readonly I32 = 1;
	public static readonly I64 = 2;
	public static readonly U32 = 3;
	public static readonly U64 = 4;
	public static readonly F32 = 5;
	public static readonly F64 = 6;
	public static readonly V128 = 7;
	public static readonly STRING = 8;
	public static readonly BOOLEAN = 9;
	public static readonly VOID = 10;
	public static readonly ATTRIBUTE = 11;
	public static readonly ABSTRACT = 12;
	public static readonly CLASS = 13;
	public static readonly EXTENDS = 14;
	public static readonly STATIC = 15;
	public static readonly FUNCTION = 16;
	public static readonly LET = 17;
	public static readonly NEW = 18;
	public static readonly CONST = 19;
	public static readonly RETURN = 20;
	public static readonly IF = 21;
	public static readonly ELSE = 22;
	public static readonly SWITCH = 23;
	public static readonly CASE = 24;
	public static readonly FOR = 25;
	public static readonly DO = 26;
	public static readonly WHILE = 27;
	public static readonly BREAK = 28;
	public static readonly TRY = 29;
	public static readonly CATCH = 30;
	public static readonly FINALLY = 31;
	public static readonly THIS = 32;
	public static readonly SUPER = 33;
	public static readonly TYPE_OF = 34;
	public static readonly INSTANCE_OF = 35;
	public static readonly IN = 36;
	public static readonly AS = 37;
	public static readonly LPAR = 38;
	public static readonly RPAR = 39;
	public static readonly LBRAK = 40;
	public static readonly RBRAK = 41;
	public static readonly LCURL = 42;
	public static readonly RCURL = 43;
	public static readonly ARROW = 44;
	public static readonly GT = 45;
	public static readonly LT = 46;
	public static readonly LTE = 47;
	public static readonly GTE = 48;
	public static readonly EQUALS = 49;
	public static readonly NOT_EQUALS = 50;
	public static readonly NOT = 51;
	public static readonly AND = 52;
	public static readonly OR = 53;
	public static readonly QUESTION = 54;
	public static readonly SEMI = 55;
	public static readonly COLON = 56;
	public static readonly COMMA = 57;
	public static readonly DOT = 58;
	public static readonly AT = 59;
	public static readonly INC = 60;
	public static readonly DEC = 61;
	public static readonly PLUS = 62;
	public static readonly MINUS = 63;
	public static readonly STAR = 64;
	public static readonly SLASH = 65;
	public static readonly BSLASH = 66;
	public static readonly PERCENT = 67;
	public static readonly CARET = 68;
	public static readonly TILDE = 69;
	public static readonly AMP = 70;
	public static readonly PIPE = 71;
	public static readonly LSHIFT = 72;
	public static readonly RSHIFT = 73;
	public static readonly URSHIFT = 74;
	public static readonly ASSIGN = 75;
	public static readonly ADD_ASSIGN = 76;
	public static readonly SUB_ASSIGN = 77;
	public static readonly MUL_ASSIGN = 78;
	public static readonly DIV_ASSIGN = 79;
	public static readonly AND_ASSIGN = 80;
	public static readonly OR_ASSIGN = 81;
	public static readonly XOR_ASSIGN = 82;
	public static readonly MOD_ASSIGN = 83;
	public static readonly LSHIFT_ASSIGN = 84;
	public static readonly RSHIFT_ASSIGN = 85;
	public static readonly URSHIFT_ASSIGN = 86;
	public static readonly INTEGER_LITERAL = 87;
	public static readonly DECIMAL_LITERAL = 88;
	public static readonly BOOLEAN_LITERAL = 89;
	public static readonly CHAR_LITERAL = 90;
	public static readonly STRING_LITERAL = 91;
	public static readonly NULL_LITERAL = 92;
	public static readonly IDENTIFIER = 93;
	public static readonly ANNOTATION = 94;
	public static readonly WS = 95;
	public static readonly COMMENT = 96;
	public static readonly LINE_COMMENT = 97;
	public static readonly EOF = Token.EOF;

	public static readonly channelNames: string[] = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	public static readonly literalNames: string[] = [ null, "'i32'", "'i64'", 
                                                   "'u32'", "'u64'", "'f32'", 
                                                   "'f64'", "'v128'", "'string'", 
                                                   "'boolean'", "'void'", 
                                                   "'attribute'", "'abstract'", 
                                                   "'class'", "'extends'", 
                                                   "'static'", "'function'", 
                                                   "'let'", "'new'", "'const'", 
                                                   "'return'", "'if'", "'else'", 
                                                   "'switch'", "'case'", 
                                                   "'for'", "'do'", "'while'", 
                                                   "'break'", "'try'", "'catch'", 
                                                   "'finally'", "'this'", 
                                                   "'super'", "'typeof'", 
                                                   "'instanceof'", "'in'", 
                                                   "'as'", "'('", "')'", 
                                                   "'['", "']'", "'{'", 
                                                   "'}'", "'=>'", "'>'", 
                                                   "'<'", "'<='", "'>='", 
                                                   "'=='", "'!='", "'!'", 
                                                   "'&&'", "'||'", "'?'", 
                                                   "';'", "':'", "','", 
                                                   "'.'", "'@'", "'++'", 
                                                   "'--'", "'+'", "'-'", 
                                                   "'*'", "'/'", "'\\'", 
                                                   "'%'", "'^'", "'~'", 
                                                   "'&'", "'|'", "'<<'", 
                                                   "'>>'", "'>>>'", "'='", 
                                                   "'+='", "'-='", "'*='", 
                                                   "'/='", "'&='", "'|='", 
                                                   "'^='", "'%='", "'<<='", 
                                                   "'>>='", "'>>>='", null, 
                                                   null, null, null, null, 
                                                   "'null'" ];
	public static readonly symbolicNames: string[] = [ null, "I32", "I64", 
                                                    "U32", "U64", "F32", 
                                                    "F64", "V128", "STRING", 
                                                    "BOOLEAN", "VOID", "ATTRIBUTE", 
                                                    "ABSTRACT", "CLASS", 
                                                    "EXTENDS", "STATIC", 
                                                    "FUNCTION", "LET", "NEW", 
                                                    "CONST", "RETURN", "IF", 
                                                    "ELSE", "SWITCH", "CASE", 
                                                    "FOR", "DO", "WHILE", 
                                                    "BREAK", "TRY", "CATCH", 
                                                    "FINALLY", "THIS", "SUPER", 
                                                    "TYPE_OF", "INSTANCE_OF", 
                                                    "IN", "AS", "LPAR", 
                                                    "RPAR", "LBRAK", "RBRAK", 
                                                    "LCURL", "RCURL", "ARROW", 
                                                    "GT", "LT", "LTE", "GTE", 
                                                    "EQUALS", "NOT_EQUALS", 
                                                    "NOT", "AND", "OR", 
                                                    "QUESTION", "SEMI", 
                                                    "COLON", "COMMA", "DOT", 
                                                    "AT", "INC", "DEC", 
                                                    "PLUS", "MINUS", "STAR", 
                                                    "SLASH", "BSLASH", "PERCENT", 
                                                    "CARET", "TILDE", "AMP", 
                                                    "PIPE", "LSHIFT", "RSHIFT", 
                                                    "URSHIFT", "ASSIGN", 
                                                    "ADD_ASSIGN", "SUB_ASSIGN", 
                                                    "MUL_ASSIGN", "DIV_ASSIGN", 
                                                    "AND_ASSIGN", "OR_ASSIGN", 
                                                    "XOR_ASSIGN", "MOD_ASSIGN", 
                                                    "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", 
                                                    "URSHIFT_ASSIGN", "INTEGER_LITERAL", 
                                                    "DECIMAL_LITERAL", "BOOLEAN_LITERAL", 
                                                    "CHAR_LITERAL", "STRING_LITERAL", 
                                                    "NULL_LITERAL", "IDENTIFIER", 
                                                    "ANNOTATION", "WS", 
                                                    "COMMENT", "LINE_COMMENT" ];
	public static readonly modeNames: string[] = [ "DEFAULT_MODE", ];

	public static readonly ruleNames: string[] = [
		"I32", "I64", "U32", "U64", "F32", "F64", "V128", "STRING", "BOOLEAN", 
		"VOID", "ATTRIBUTE", "ABSTRACT", "CLASS", "EXTENDS", "STATIC", "FUNCTION", 
		"LET", "NEW", "CONST", "RETURN", "IF", "ELSE", "SWITCH", "CASE", "FOR", 
		"DO", "WHILE", "BREAK", "TRY", "CATCH", "FINALLY", "THIS", "SUPER", "TYPE_OF", 
		"INSTANCE_OF", "IN", "AS", "LPAR", "RPAR", "LBRAK", "RBRAK", "LCURL", 
		"RCURL", "ARROW", "GT", "LT", "LTE", "GTE", "EQUALS", "NOT_EQUALS", "NOT", 
		"AND", "OR", "QUESTION", "SEMI", "COLON", "COMMA", "DOT", "AT", "INC", 
		"DEC", "PLUS", "MINUS", "STAR", "SLASH", "BSLASH", "PERCENT", "CARET", 
		"TILDE", "AMP", "PIPE", "LSHIFT", "RSHIFT", "URSHIFT", "ASSIGN", "ADD_ASSIGN", 
		"SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", 
		"MOD_ASSIGN", "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", "INTEGER_LITERAL", 
		"DecimalIntegerLiteral", "HexIntegerLiteral", "OctalIntegerLiteral", "BinaryIntegerLiteral", 
		"IntegerTypeSuffix", "DecimalNumeral", "Digits", "Digit", "NonZeroDigit", 
		"DigitsAndUnderscores", "DigitOrUnderscore", "Underscores", "HexNumeral", 
		"HexDigits", "HexDigit", "HexDigitsAndUnderscores", "HexDigitOrUnderscore", 
		"OctalNumeral", "OctalDigits", "OctalDigit", "OctalDigitsAndUnderscores", 
		"OctalDigitOrUnderscore", "BinaryNumeral", "BinaryDigits", "BinaryDigit", 
		"BinaryDigitsAndUnderscores", "BinaryDigitOrUnderscore", "DECIMAL_LITERAL", 
		"DecimalFloatingPointLiteral", "ExponentPart", "ExponentIndicator", "SignedInteger", 
		"Sign", "FloatTypeSuffix", "HexadecimalFloatingPointLiteral", "HexSignificand", 
		"BinaryExponent", "BinaryExponentIndicator", "BOOLEAN_LITERAL", "CHAR_LITERAL", 
		"SingleCharacter", "STRING_LITERAL", "StringCharacters", "StringCharacter", 
		"EscapeSequence", "OctalEscape", "ZeroToThree", "UnicodeEscape", "NULL_LITERAL", 
		"IDENTIFIER", "Letter", "LetterOrDigit", "ANNOTATION", "WS", "COMMENT", 
		"LINE_COMMENT",
	];


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(this, ComposeLexer._ATN, ComposeLexer.DecisionsToDFA, new PredictionContextCache());
	}

	public get grammarFileName(): string { return "ComposeLexer.g4"; }

	public get literalNames(): (string | null)[] { return ComposeLexer.literalNames; }
	public get symbolicNames(): (string | null)[] { return ComposeLexer.symbolicNames; }
	public get ruleNames(): string[] { return ComposeLexer.ruleNames; }

	public get serializedATN(): number[] { return ComposeLexer._serializedATN; }

	public get channelNames(): string[] { return ComposeLexer.channelNames; }

	public get modeNames(): string[] { return ComposeLexer.modeNames; }

	public static readonly _serializedATN: number[] = [4,0,97,946,6,-1,2,0,
	7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,
	7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,
	16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,
	2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,
	31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,
	7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
	45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
	2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,
	60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,
	7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,
	74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,
	2,82,7,82,2,83,7,83,2,84,7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,
	89,7,89,2,90,7,90,2,91,7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,
	7,96,2,97,7,97,2,98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,
	2,103,7,103,2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,
	2,109,7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
	2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,
	2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,
	2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,
	2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,
	2,139,7,139,2,140,7,140,2,141,7,141,2,142,7,142,1,0,1,0,1,0,1,0,1,1,1,1,
	1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,
	1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,
	1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
	1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,
	12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,
	1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,
	16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,
	1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,
	22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,
	1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,
	28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,
	1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,
	33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
	1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,
	40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,
	1,46,1,47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,51,1,51,1,
	51,1,52,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,58,
	1,58,1,59,1,59,1,59,1,60,1,60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,
	64,1,65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,1,69,1,69,1,70,1,70,1,71,1,71,
	1,71,1,72,1,72,1,72,1,73,1,73,1,73,1,73,1,74,1,74,1,75,1,75,1,75,1,76,1,
	76,1,76,1,77,1,77,1,77,1,78,1,78,1,78,1,79,1,79,1,79,1,80,1,80,1,80,1,81,
	1,81,1,81,1,82,1,82,1,82,1,83,1,83,1,83,1,83,1,84,1,84,1,84,1,84,1,85,1,
	85,1,85,1,85,1,85,1,86,1,86,1,86,1,86,3,86,629,8,86,1,87,1,87,3,87,633,
	8,87,1,88,1,88,3,88,637,8,88,1,89,1,89,3,89,641,8,89,1,90,1,90,3,90,645,
	8,90,1,91,1,91,1,92,1,92,1,92,3,92,652,8,92,1,92,1,92,1,92,3,92,657,8,92,
	3,92,659,8,92,1,93,1,93,3,93,663,8,93,1,93,3,93,666,8,93,1,94,1,94,3,94,
	670,8,94,1,95,1,95,1,96,4,96,675,8,96,11,96,12,96,676,1,97,1,97,3,97,681,
	8,97,1,98,4,98,684,8,98,11,98,12,98,685,1,99,1,99,1,99,1,99,1,100,1,100,
	3,100,694,8,100,1,100,3,100,697,8,100,1,101,1,101,1,102,4,102,702,8,102,
	11,102,12,102,703,1,103,1,103,3,103,708,8,103,1,104,1,104,3,104,712,8,104,
	1,104,1,104,1,105,1,105,3,105,718,8,105,1,105,3,105,721,8,105,1,106,1,106,
	1,107,4,107,726,8,107,11,107,12,107,727,1,108,1,108,3,108,732,8,108,1,109,
	1,109,1,109,1,109,1,110,1,110,3,110,740,8,110,1,110,3,110,743,8,110,1,111,
	1,111,1,112,4,112,748,8,112,11,112,12,112,749,1,113,1,113,3,113,754,8,113,
	1,114,1,114,3,114,758,8,114,1,115,1,115,1,115,3,115,763,8,115,1,115,3,115,
	766,8,115,1,115,3,115,769,8,115,1,115,1,115,1,115,3,115,774,8,115,1,115,
	3,115,777,8,115,1,115,1,115,1,115,3,115,782,8,115,1,115,1,115,1,115,3,115,
	787,8,115,1,116,1,116,1,116,1,117,1,117,1,118,3,118,795,8,118,1,118,1,118,
	1,119,1,119,1,120,1,120,1,121,1,121,1,121,3,121,806,8,121,1,122,1,122,3,
	122,810,8,122,1,122,1,122,1,122,3,122,815,8,122,1,122,1,122,3,122,819,8,
	122,1,123,1,123,1,123,1,124,1,124,1,125,1,125,1,125,1,125,1,125,1,125,1,
	125,1,125,1,125,3,125,835,8,125,1,126,1,126,1,126,1,126,1,126,1,126,1,126,
	1,126,3,126,845,8,126,1,127,1,127,1,128,1,128,3,128,851,8,128,1,128,1,128,
	1,129,4,129,856,8,129,11,129,12,129,857,1,130,1,130,3,130,862,8,130,1,131,
	1,131,1,131,1,131,3,131,868,8,131,1,132,1,132,1,132,1,132,1,132,1,132,1,
	132,1,132,1,132,1,132,1,132,3,132,881,8,132,1,133,1,133,1,134,1,134,4,134,
	887,8,134,11,134,12,134,888,1,134,1,134,1,134,1,134,1,134,1,135,1,135,1,
	135,1,135,1,135,1,136,1,136,5,136,903,8,136,10,136,12,136,906,9,136,1,137,
	1,137,1,138,1,138,1,139,1,139,1,139,1,140,4,140,916,8,140,11,140,12,140,
	917,1,140,1,140,1,141,1,141,1,141,1,141,5,141,926,8,141,10,141,12,141,929,
	9,141,1,141,1,141,1,141,1,141,1,141,1,142,1,142,1,142,1,142,5,142,940,8,
	142,10,142,12,142,943,9,142,1,142,1,142,1,927,0,143,1,1,3,2,5,3,7,4,9,5,
	11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
	18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
	30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,
	42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,
	107,54,109,55,111,56,113,57,115,58,117,59,119,60,121,61,123,62,125,63,127,
	64,129,65,131,66,133,67,135,68,137,69,139,70,141,71,143,72,145,73,147,74,
	149,75,151,76,153,77,155,78,157,79,159,80,161,81,163,82,165,83,167,84,169,
	85,171,86,173,87,175,0,177,0,179,0,181,0,183,0,185,0,187,0,189,0,191,0,
	193,0,195,0,197,0,199,0,201,0,203,0,205,0,207,0,209,0,211,0,213,0,215,0,
	217,0,219,0,221,0,223,0,225,0,227,0,229,88,231,0,233,0,235,0,237,0,239,
	0,241,0,243,0,245,0,247,0,249,0,251,89,253,90,255,0,257,91,259,0,261,0,
	263,0,265,0,267,0,269,0,271,92,273,93,275,0,277,0,279,94,281,95,283,96,
	285,97,1,0,19,2,0,76,76,108,108,1,0,49,57,2,0,88,88,120,120,3,0,48,57,65,
	70,97,102,1,0,48,55,2,0,66,66,98,98,1,0,48,49,2,0,69,69,101,101,2,0,43,
	43,45,45,4,0,68,68,70,70,100,100,102,102,2,0,80,80,112,112,4,0,10,10,13,
	13,39,39,92,92,4,0,10,10,13,13,34,34,92,92,8,0,34,34,39,39,92,92,98,98,
	102,102,110,110,114,114,116,116,1,0,48,51,4,0,36,36,65,90,95,95,97,122,
	5,0,36,36,48,57,65,90,95,95,97,122,3,0,9,10,12,13,32,32,2,0,10,10,13,13,
	957,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
	0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
	0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,
	0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,
	0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,
	0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,
	0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,
	0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,
	0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,
	0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,
	0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,
	0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,
	0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,
	141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,
	1,0,0,0,0,153,1,0,0,0,0,155,1,0,0,0,0,157,1,0,0,0,0,159,1,0,0,0,0,161,1,
	0,0,0,0,163,1,0,0,0,0,165,1,0,0,0,0,167,1,0,0,0,0,169,1,0,0,0,0,171,1,0,
	0,0,0,173,1,0,0,0,0,229,1,0,0,0,0,251,1,0,0,0,0,253,1,0,0,0,0,257,1,0,0,
	0,0,271,1,0,0,0,0,273,1,0,0,0,0,279,1,0,0,0,0,281,1,0,0,0,0,283,1,0,0,0,
	0,285,1,0,0,0,1,287,1,0,0,0,3,291,1,0,0,0,5,295,1,0,0,0,7,299,1,0,0,0,9,
	303,1,0,0,0,11,307,1,0,0,0,13,311,1,0,0,0,15,316,1,0,0,0,17,323,1,0,0,0,
	19,331,1,0,0,0,21,336,1,0,0,0,23,346,1,0,0,0,25,355,1,0,0,0,27,361,1,0,
	0,0,29,369,1,0,0,0,31,376,1,0,0,0,33,385,1,0,0,0,35,389,1,0,0,0,37,393,
	1,0,0,0,39,399,1,0,0,0,41,406,1,0,0,0,43,409,1,0,0,0,45,414,1,0,0,0,47,
	421,1,0,0,0,49,426,1,0,0,0,51,430,1,0,0,0,53,433,1,0,0,0,55,439,1,0,0,0,
	57,445,1,0,0,0,59,449,1,0,0,0,61,455,1,0,0,0,63,463,1,0,0,0,65,468,1,0,
	0,0,67,474,1,0,0,0,69,481,1,0,0,0,71,492,1,0,0,0,73,495,1,0,0,0,75,498,
	1,0,0,0,77,500,1,0,0,0,79,502,1,0,0,0,81,504,1,0,0,0,83,506,1,0,0,0,85,
	508,1,0,0,0,87,510,1,0,0,0,89,513,1,0,0,0,91,515,1,0,0,0,93,517,1,0,0,0,
	95,520,1,0,0,0,97,523,1,0,0,0,99,526,1,0,0,0,101,529,1,0,0,0,103,531,1,
	0,0,0,105,534,1,0,0,0,107,537,1,0,0,0,109,539,1,0,0,0,111,541,1,0,0,0,113,
	543,1,0,0,0,115,545,1,0,0,0,117,547,1,0,0,0,119,549,1,0,0,0,121,552,1,0,
	0,0,123,555,1,0,0,0,125,557,1,0,0,0,127,559,1,0,0,0,129,561,1,0,0,0,131,
	563,1,0,0,0,133,565,1,0,0,0,135,567,1,0,0,0,137,569,1,0,0,0,139,571,1,0,
	0,0,141,573,1,0,0,0,143,575,1,0,0,0,145,578,1,0,0,0,147,581,1,0,0,0,149,
	585,1,0,0,0,151,587,1,0,0,0,153,590,1,0,0,0,155,593,1,0,0,0,157,596,1,0,
	0,0,159,599,1,0,0,0,161,602,1,0,0,0,163,605,1,0,0,0,165,608,1,0,0,0,167,
	611,1,0,0,0,169,615,1,0,0,0,171,619,1,0,0,0,173,628,1,0,0,0,175,630,1,0,
	0,0,177,634,1,0,0,0,179,638,1,0,0,0,181,642,1,0,0,0,183,646,1,0,0,0,185,
	658,1,0,0,0,187,660,1,0,0,0,189,669,1,0,0,0,191,671,1,0,0,0,193,674,1,0,
	0,0,195,680,1,0,0,0,197,683,1,0,0,0,199,687,1,0,0,0,201,691,1,0,0,0,203,
	698,1,0,0,0,205,701,1,0,0,0,207,707,1,0,0,0,209,709,1,0,0,0,211,715,1,0,
	0,0,213,722,1,0,0,0,215,725,1,0,0,0,217,731,1,0,0,0,219,733,1,0,0,0,221,
	737,1,0,0,0,223,744,1,0,0,0,225,747,1,0,0,0,227,753,1,0,0,0,229,757,1,0,
	0,0,231,786,1,0,0,0,233,788,1,0,0,0,235,791,1,0,0,0,237,794,1,0,0,0,239,
	798,1,0,0,0,241,800,1,0,0,0,243,802,1,0,0,0,245,818,1,0,0,0,247,820,1,0,
	0,0,249,823,1,0,0,0,251,834,1,0,0,0,253,844,1,0,0,0,255,846,1,0,0,0,257,
	848,1,0,0,0,259,855,1,0,0,0,261,861,1,0,0,0,263,867,1,0,0,0,265,880,1,0,
	0,0,267,882,1,0,0,0,269,884,1,0,0,0,271,895,1,0,0,0,273,900,1,0,0,0,275,
	907,1,0,0,0,277,909,1,0,0,0,279,911,1,0,0,0,281,915,1,0,0,0,283,921,1,0,
	0,0,285,935,1,0,0,0,287,288,5,105,0,0,288,289,5,51,0,0,289,290,5,50,0,0,
	290,2,1,0,0,0,291,292,5,105,0,0,292,293,5,54,0,0,293,294,5,52,0,0,294,4,
	1,0,0,0,295,296,5,117,0,0,296,297,5,51,0,0,297,298,5,50,0,0,298,6,1,0,0,
	0,299,300,5,117,0,0,300,301,5,54,0,0,301,302,5,52,0,0,302,8,1,0,0,0,303,
	304,5,102,0,0,304,305,5,51,0,0,305,306,5,50,0,0,306,10,1,0,0,0,307,308,
	5,102,0,0,308,309,5,54,0,0,309,310,5,52,0,0,310,12,1,0,0,0,311,312,5,118,
	0,0,312,313,5,49,0,0,313,314,5,50,0,0,314,315,5,56,0,0,315,14,1,0,0,0,316,
	317,5,115,0,0,317,318,5,116,0,0,318,319,5,114,0,0,319,320,5,105,0,0,320,
	321,5,110,0,0,321,322,5,103,0,0,322,16,1,0,0,0,323,324,5,98,0,0,324,325,
	5,111,0,0,325,326,5,111,0,0,326,327,5,108,0,0,327,328,5,101,0,0,328,329,
	5,97,0,0,329,330,5,110,0,0,330,18,1,0,0,0,331,332,5,118,0,0,332,333,5,111,
	0,0,333,334,5,105,0,0,334,335,5,100,0,0,335,20,1,0,0,0,336,337,5,97,0,0,
	337,338,5,116,0,0,338,339,5,116,0,0,339,340,5,114,0,0,340,341,5,105,0,0,
	341,342,5,98,0,0,342,343,5,117,0,0,343,344,5,116,0,0,344,345,5,101,0,0,
	345,22,1,0,0,0,346,347,5,97,0,0,347,348,5,98,0,0,348,349,5,115,0,0,349,
	350,5,116,0,0,350,351,5,114,0,0,351,352,5,97,0,0,352,353,5,99,0,0,353,354,
	5,116,0,0,354,24,1,0,0,0,355,356,5,99,0,0,356,357,5,108,0,0,357,358,5,97,
	0,0,358,359,5,115,0,0,359,360,5,115,0,0,360,26,1,0,0,0,361,362,5,101,0,
	0,362,363,5,120,0,0,363,364,5,116,0,0,364,365,5,101,0,0,365,366,5,110,0,
	0,366,367,5,100,0,0,367,368,5,115,0,0,368,28,1,0,0,0,369,370,5,115,0,0,
	370,371,5,116,0,0,371,372,5,97,0,0,372,373,5,116,0,0,373,374,5,105,0,0,
	374,375,5,99,0,0,375,30,1,0,0,0,376,377,5,102,0,0,377,378,5,117,0,0,378,
	379,5,110,0,0,379,380,5,99,0,0,380,381,5,116,0,0,381,382,5,105,0,0,382,
	383,5,111,0,0,383,384,5,110,0,0,384,32,1,0,0,0,385,386,5,108,0,0,386,387,
	5,101,0,0,387,388,5,116,0,0,388,34,1,0,0,0,389,390,5,110,0,0,390,391,5,
	101,0,0,391,392,5,119,0,0,392,36,1,0,0,0,393,394,5,99,0,0,394,395,5,111,
	0,0,395,396,5,110,0,0,396,397,5,115,0,0,397,398,5,116,0,0,398,38,1,0,0,
	0,399,400,5,114,0,0,400,401,5,101,0,0,401,402,5,116,0,0,402,403,5,117,0,
	0,403,404,5,114,0,0,404,405,5,110,0,0,405,40,1,0,0,0,406,407,5,105,0,0,
	407,408,5,102,0,0,408,42,1,0,0,0,409,410,5,101,0,0,410,411,5,108,0,0,411,
	412,5,115,0,0,412,413,5,101,0,0,413,44,1,0,0,0,414,415,5,115,0,0,415,416,
	5,119,0,0,416,417,5,105,0,0,417,418,5,116,0,0,418,419,5,99,0,0,419,420,
	5,104,0,0,420,46,1,0,0,0,421,422,5,99,0,0,422,423,5,97,0,0,423,424,5,115,
	0,0,424,425,5,101,0,0,425,48,1,0,0,0,426,427,5,102,0,0,427,428,5,111,0,
	0,428,429,5,114,0,0,429,50,1,0,0,0,430,431,5,100,0,0,431,432,5,111,0,0,
	432,52,1,0,0,0,433,434,5,119,0,0,434,435,5,104,0,0,435,436,5,105,0,0,436,
	437,5,108,0,0,437,438,5,101,0,0,438,54,1,0,0,0,439,440,5,98,0,0,440,441,
	5,114,0,0,441,442,5,101,0,0,442,443,5,97,0,0,443,444,5,107,0,0,444,56,1,
	0,0,0,445,446,5,116,0,0,446,447,5,114,0,0,447,448,5,121,0,0,448,58,1,0,
	0,0,449,450,5,99,0,0,450,451,5,97,0,0,451,452,5,116,0,0,452,453,5,99,0,
	0,453,454,5,104,0,0,454,60,1,0,0,0,455,456,5,102,0,0,456,457,5,105,0,0,
	457,458,5,110,0,0,458,459,5,97,0,0,459,460,5,108,0,0,460,461,5,108,0,0,
	461,462,5,121,0,0,462,62,1,0,0,0,463,464,5,116,0,0,464,465,5,104,0,0,465,
	466,5,105,0,0,466,467,5,115,0,0,467,64,1,0,0,0,468,469,5,115,0,0,469,470,
	5,117,0,0,470,471,5,112,0,0,471,472,5,101,0,0,472,473,5,114,0,0,473,66,
	1,0,0,0,474,475,5,116,0,0,475,476,5,121,0,0,476,477,5,112,0,0,477,478,5,
	101,0,0,478,479,5,111,0,0,479,480,5,102,0,0,480,68,1,0,0,0,481,482,5,105,
	0,0,482,483,5,110,0,0,483,484,5,115,0,0,484,485,5,116,0,0,485,486,5,97,
	0,0,486,487,5,110,0,0,487,488,5,99,0,0,488,489,5,101,0,0,489,490,5,111,
	0,0,490,491,5,102,0,0,491,70,1,0,0,0,492,493,5,105,0,0,493,494,5,110,0,
	0,494,72,1,0,0,0,495,496,5,97,0,0,496,497,5,115,0,0,497,74,1,0,0,0,498,
	499,5,40,0,0,499,76,1,0,0,0,500,501,5,41,0,0,501,78,1,0,0,0,502,503,5,91,
	0,0,503,80,1,0,0,0,504,505,5,93,0,0,505,82,1,0,0,0,506,507,5,123,0,0,507,
	84,1,0,0,0,508,509,5,125,0,0,509,86,1,0,0,0,510,511,5,61,0,0,511,512,5,
	62,0,0,512,88,1,0,0,0,513,514,5,62,0,0,514,90,1,0,0,0,515,516,5,60,0,0,
	516,92,1,0,0,0,517,518,5,60,0,0,518,519,5,61,0,0,519,94,1,0,0,0,520,521,
	5,62,0,0,521,522,5,61,0,0,522,96,1,0,0,0,523,524,5,61,0,0,524,525,5,61,
	0,0,525,98,1,0,0,0,526,527,5,33,0,0,527,528,5,61,0,0,528,100,1,0,0,0,529,
	530,5,33,0,0,530,102,1,0,0,0,531,532,5,38,0,0,532,533,5,38,0,0,533,104,
	1,0,0,0,534,535,5,124,0,0,535,536,5,124,0,0,536,106,1,0,0,0,537,538,5,63,
	0,0,538,108,1,0,0,0,539,540,5,59,0,0,540,110,1,0,0,0,541,542,5,58,0,0,542,
	112,1,0,0,0,543,544,5,44,0,0,544,114,1,0,0,0,545,546,5,46,0,0,546,116,1,
	0,0,0,547,548,5,64,0,0,548,118,1,0,0,0,549,550,5,43,0,0,550,551,5,43,0,
	0,551,120,1,0,0,0,552,553,5,45,0,0,553,554,5,45,0,0,554,122,1,0,0,0,555,
	556,5,43,0,0,556,124,1,0,0,0,557,558,5,45,0,0,558,126,1,0,0,0,559,560,5,
	42,0,0,560,128,1,0,0,0,561,562,5,47,0,0,562,130,1,0,0,0,563,564,5,92,0,
	0,564,132,1,0,0,0,565,566,5,37,0,0,566,134,1,0,0,0,567,568,5,94,0,0,568,
	136,1,0,0,0,569,570,5,126,0,0,570,138,1,0,0,0,571,572,5,38,0,0,572,140,
	1,0,0,0,573,574,5,124,0,0,574,142,1,0,0,0,575,576,5,60,0,0,576,577,5,60,
	0,0,577,144,1,0,0,0,578,579,5,62,0,0,579,580,5,62,0,0,580,146,1,0,0,0,581,
	582,5,62,0,0,582,583,5,62,0,0,583,584,5,62,0,0,584,148,1,0,0,0,585,586,
	5,61,0,0,586,150,1,0,0,0,587,588,5,43,0,0,588,589,5,61,0,0,589,152,1,0,
	0,0,590,591,5,45,0,0,591,592,5,61,0,0,592,154,1,0,0,0,593,594,5,42,0,0,
	594,595,5,61,0,0,595,156,1,0,0,0,596,597,5,47,0,0,597,598,5,61,0,0,598,
	158,1,0,0,0,599,600,5,38,0,0,600,601,5,61,0,0,601,160,1,0,0,0,602,603,5,
	124,0,0,603,604,5,61,0,0,604,162,1,0,0,0,605,606,5,94,0,0,606,607,5,61,
	0,0,607,164,1,0,0,0,608,609,5,37,0,0,609,610,5,61,0,0,610,166,1,0,0,0,611,
	612,5,60,0,0,612,613,5,60,0,0,613,614,5,61,0,0,614,168,1,0,0,0,615,616,
	5,62,0,0,616,617,5,62,0,0,617,618,5,61,0,0,618,170,1,0,0,0,619,620,5,62,
	0,0,620,621,5,62,0,0,621,622,5,62,0,0,622,623,5,61,0,0,623,172,1,0,0,0,
	624,629,3,175,87,0,625,629,3,177,88,0,626,629,3,179,89,0,627,629,3,181,
	90,0,628,624,1,0,0,0,628,625,1,0,0,0,628,626,1,0,0,0,628,627,1,0,0,0,629,
	174,1,0,0,0,630,632,3,185,92,0,631,633,3,183,91,0,632,631,1,0,0,0,632,633,
	1,0,0,0,633,176,1,0,0,0,634,636,3,199,99,0,635,637,3,183,91,0,636,635,1,
	0,0,0,636,637,1,0,0,0,637,178,1,0,0,0,638,640,3,209,104,0,639,641,3,183,
	91,0,640,639,1,0,0,0,640,641,1,0,0,0,641,180,1,0,0,0,642,644,3,219,109,
	0,643,645,3,183,91,0,644,643,1,0,0,0,644,645,1,0,0,0,645,182,1,0,0,0,646,
	647,7,0,0,0,647,184,1,0,0,0,648,659,5,48,0,0,649,656,3,191,95,0,650,652,
	3,187,93,0,651,650,1,0,0,0,651,652,1,0,0,0,652,657,1,0,0,0,653,654,3,197,
	98,0,654,655,3,187,93,0,655,657,1,0,0,0,656,651,1,0,0,0,656,653,1,0,0,0,
	657,659,1,0,0,0,658,648,1,0,0,0,658,649,1,0,0,0,659,186,1,0,0,0,660,665,
	3,189,94,0,661,663,3,193,96,0,662,661,1,0,0,0,662,663,1,0,0,0,663,664,1,
	0,0,0,664,666,3,189,94,0,665,662,1,0,0,0,665,666,1,0,0,0,666,188,1,0,0,
	0,667,670,5,48,0,0,668,670,3,191,95,0,669,667,1,0,0,0,669,668,1,0,0,0,670,
	190,1,0,0,0,671,672,7,1,0,0,672,192,1,0,0,0,673,675,3,195,97,0,674,673,
	1,0,0,0,675,676,1,0,0,0,676,674,1,0,0,0,676,677,1,0,0,0,677,194,1,0,0,0,
	678,681,3,189,94,0,679,681,5,95,0,0,680,678,1,0,0,0,680,679,1,0,0,0,681,
	196,1,0,0,0,682,684,5,95,0,0,683,682,1,0,0,0,684,685,1,0,0,0,685,683,1,
	0,0,0,685,686,1,0,0,0,686,198,1,0,0,0,687,688,5,48,0,0,688,689,7,2,0,0,
	689,690,3,201,100,0,690,200,1,0,0,0,691,696,3,203,101,0,692,694,3,205,102,
	0,693,692,1,0,0,0,693,694,1,0,0,0,694,695,1,0,0,0,695,697,3,203,101,0,696,
	693,1,0,0,0,696,697,1,0,0,0,697,202,1,0,0,0,698,699,7,3,0,0,699,204,1,0,
	0,0,700,702,3,207,103,0,701,700,1,0,0,0,702,703,1,0,0,0,703,701,1,0,0,0,
	703,704,1,0,0,0,704,206,1,0,0,0,705,708,3,203,101,0,706,708,5,95,0,0,707,
	705,1,0,0,0,707,706,1,0,0,0,708,208,1,0,0,0,709,711,5,48,0,0,710,712,3,
	197,98,0,711,710,1,0,0,0,711,712,1,0,0,0,712,713,1,0,0,0,713,714,3,211,
	105,0,714,210,1,0,0,0,715,720,3,213,106,0,716,718,3,215,107,0,717,716,1,
	0,0,0,717,718,1,0,0,0,718,719,1,0,0,0,719,721,3,213,106,0,720,717,1,0,0,
	0,720,721,1,0,0,0,721,212,1,0,0,0,722,723,7,4,0,0,723,214,1,0,0,0,724,726,
	3,217,108,0,725,724,1,0,0,0,726,727,1,0,0,0,727,725,1,0,0,0,727,728,1,0,
	0,0,728,216,1,0,0,0,729,732,3,213,106,0,730,732,5,95,0,0,731,729,1,0,0,
	0,731,730,1,0,0,0,732,218,1,0,0,0,733,734,5,48,0,0,734,735,7,5,0,0,735,
	736,3,221,110,0,736,220,1,0,0,0,737,742,3,223,111,0,738,740,3,225,112,0,
	739,738,1,0,0,0,739,740,1,0,0,0,740,741,1,0,0,0,741,743,3,223,111,0,742,
	739,1,0,0,0,742,743,1,0,0,0,743,222,1,0,0,0,744,745,7,6,0,0,745,224,1,0,
	0,0,746,748,3,227,113,0,747,746,1,0,0,0,748,749,1,0,0,0,749,747,1,0,0,0,
	749,750,1,0,0,0,750,226,1,0,0,0,751,754,3,223,111,0,752,754,5,95,0,0,753,
	751,1,0,0,0,753,752,1,0,0,0,754,228,1,0,0,0,755,758,3,231,115,0,756,758,
	3,243,121,0,757,755,1,0,0,0,757,756,1,0,0,0,758,230,1,0,0,0,759,760,3,187,
	93,0,760,762,5,46,0,0,761,763,3,187,93,0,762,761,1,0,0,0,762,763,1,0,0,
	0,763,765,1,0,0,0,764,766,3,233,116,0,765,764,1,0,0,0,765,766,1,0,0,0,766,
	768,1,0,0,0,767,769,3,241,120,0,768,767,1,0,0,0,768,769,1,0,0,0,769,787,
	1,0,0,0,770,771,5,46,0,0,771,773,3,187,93,0,772,774,3,233,116,0,773,772,
	1,0,0,0,773,774,1,0,0,0,774,776,1,0,0,0,775,777,3,241,120,0,776,775,1,0,
	0,0,776,777,1,0,0,0,777,787,1,0,0,0,778,779,3,187,93,0,779,781,3,233,116,
	0,780,782,3,241,120,0,781,780,1,0,0,0,781,782,1,0,0,0,782,787,1,0,0,0,783,
	784,3,187,93,0,784,785,3,241,120,0,785,787,1,0,0,0,786,759,1,0,0,0,786,
	770,1,0,0,0,786,778,1,0,0,0,786,783,1,0,0,0,787,232,1,0,0,0,788,789,3,235,
	117,0,789,790,3,237,118,0,790,234,1,0,0,0,791,792,7,7,0,0,792,236,1,0,0,
	0,793,795,3,239,119,0,794,793,1,0,0,0,794,795,1,0,0,0,795,796,1,0,0,0,796,
	797,3,187,93,0,797,238,1,0,0,0,798,799,7,8,0,0,799,240,1,0,0,0,800,801,
	7,9,0,0,801,242,1,0,0,0,802,803,3,245,122,0,803,805,3,247,123,0,804,806,
	3,241,120,0,805,804,1,0,0,0,805,806,1,0,0,0,806,244,1,0,0,0,807,809,3,199,
	99,0,808,810,5,46,0,0,809,808,1,0,0,0,809,810,1,0,0,0,810,819,1,0,0,0,811,
	812,5,48,0,0,812,814,7,2,0,0,813,815,3,201,100,0,814,813,1,0,0,0,814,815,
	1,0,0,0,815,816,1,0,0,0,816,817,5,46,0,0,817,819,3,201,100,0,818,807,1,
	0,0,0,818,811,1,0,0,0,819,246,1,0,0,0,820,821,3,249,124,0,821,822,3,237,
	118,0,822,248,1,0,0,0,823,824,7,10,0,0,824,250,1,0,0,0,825,826,5,116,0,
	0,826,827,5,114,0,0,827,828,5,117,0,0,828,835,5,101,0,0,829,830,5,102,0,
	0,830,831,5,97,0,0,831,832,5,108,0,0,832,833,5,115,0,0,833,835,5,101,0,
	0,834,825,1,0,0,0,834,829,1,0,0,0,835,252,1,0,0,0,836,837,5,39,0,0,837,
	838,3,255,127,0,838,839,5,39,0,0,839,845,1,0,0,0,840,841,5,39,0,0,841,842,
	3,263,131,0,842,843,5,39,0,0,843,845,1,0,0,0,844,836,1,0,0,0,844,840,1,
	0,0,0,845,254,1,0,0,0,846,847,8,11,0,0,847,256,1,0,0,0,848,850,5,34,0,0,
	849,851,3,259,129,0,850,849,1,0,0,0,850,851,1,0,0,0,851,852,1,0,0,0,852,
	853,5,34,0,0,853,258,1,0,0,0,854,856,3,261,130,0,855,854,1,0,0,0,856,857,
	1,0,0,0,857,855,1,0,0,0,857,858,1,0,0,0,858,260,1,0,0,0,859,862,8,12,0,
	0,860,862,3,263,131,0,861,859,1,0,0,0,861,860,1,0,0,0,862,262,1,0,0,0,863,
	864,5,92,0,0,864,868,7,13,0,0,865,868,3,265,132,0,866,868,3,269,134,0,867,
	863,1,0,0,0,867,865,1,0,0,0,867,866,1,0,0,0,868,264,1,0,0,0,869,870,5,92,
	0,0,870,881,3,213,106,0,871,872,5,92,0,0,872,873,3,213,106,0,873,874,3,
	213,106,0,874,881,1,0,0,0,875,876,5,92,0,0,876,877,3,267,133,0,877,878,
	3,213,106,0,878,879,3,213,106,0,879,881,1,0,0,0,880,869,1,0,0,0,880,871,
	1,0,0,0,880,875,1,0,0,0,881,266,1,0,0,0,882,883,7,14,0,0,883,268,1,0,0,
	0,884,886,5,92,0,0,885,887,5,117,0,0,886,885,1,0,0,0,887,888,1,0,0,0,888,
	886,1,0,0,0,888,889,1,0,0,0,889,890,1,0,0,0,890,891,3,203,101,0,891,892,
	3,203,101,0,892,893,3,203,101,0,893,894,3,203,101,0,894,270,1,0,0,0,895,
	896,5,110,0,0,896,897,5,117,0,0,897,898,5,108,0,0,898,899,5,108,0,0,899,
	272,1,0,0,0,900,904,3,275,137,0,901,903,3,277,138,0,902,901,1,0,0,0,903,
	906,1,0,0,0,904,902,1,0,0,0,904,905,1,0,0,0,905,274,1,0,0,0,906,904,1,0,
	0,0,907,908,7,15,0,0,908,276,1,0,0,0,909,910,7,16,0,0,910,278,1,0,0,0,911,
	912,5,64,0,0,912,913,3,273,136,0,913,280,1,0,0,0,914,916,7,17,0,0,915,914,
	1,0,0,0,916,917,1,0,0,0,917,915,1,0,0,0,917,918,1,0,0,0,918,919,1,0,0,0,
	919,920,6,140,0,0,920,282,1,0,0,0,921,922,5,47,0,0,922,923,5,42,0,0,923,
	927,1,0,0,0,924,926,9,0,0,0,925,924,1,0,0,0,926,929,1,0,0,0,927,928,1,0,
	0,0,927,925,1,0,0,0,928,930,1,0,0,0,929,927,1,0,0,0,930,931,5,42,0,0,931,
	932,5,47,0,0,932,933,1,0,0,0,933,934,6,141,1,0,934,284,1,0,0,0,935,936,
	5,47,0,0,936,937,5,47,0,0,937,941,1,0,0,0,938,940,8,18,0,0,939,938,1,0,
	0,0,940,943,1,0,0,0,941,939,1,0,0,0,941,942,1,0,0,0,942,944,1,0,0,0,943,
	941,1,0,0,0,944,945,6,142,1,0,945,286,1,0,0,0,53,0,628,632,636,640,644,
	651,656,658,662,665,669,676,680,685,693,696,703,707,711,717,720,727,731,
	739,742,749,753,757,762,765,768,773,776,781,786,794,805,809,814,818,834,
	844,850,857,861,867,880,888,904,917,927,941,2,6,0,0,0,1,0];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!ComposeLexer.__ATN) {
			ComposeLexer.__ATN = new ATNDeserializer().deserialize(ComposeLexer._serializedATN);
		}

		return ComposeLexer.__ATN;
	}


	static DecisionsToDFA = ComposeLexer._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );
}