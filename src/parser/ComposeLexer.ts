// Generated from ComposeLexer.g4 by ANTLR 4.11.2-SNAPSHOT
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
import {
	ATN,
	ATNDeserializer,
	CharStream,
	DecisionState, DFA,
	Lexer,
	LexerATNSimulator,
	RuleContext,
	PredictionContextCache,
	Token
} from "antlr4";
export default class ComposeLexer extends Lexer {
	public static readonly I32 = 1;
	public static readonly I64 = 2;
	public static readonly U32 = 3;
	public static readonly U64 = 4;
	public static readonly F32 = 5;
	public static readonly F64 = 6;
	public static readonly V128 = 7;
	public static readonly STRING = 8;
	public static readonly BOOLEAN = 9;
	public static readonly VOID = 10;
	public static readonly ATTRIBUTE = 11;
	public static readonly ABSTRACT = 12;
	public static readonly CLASS = 13;
	public static readonly EXTENDS = 14;
	public static readonly STATIC = 15;
	public static readonly FUNCTION = 16;
	public static readonly LET = 17;
	public static readonly CONST = 18;
	public static readonly RETURN = 19;
	public static readonly IF = 20;
	public static readonly ELSE = 21;
	public static readonly SWITCH = 22;
	public static readonly CASE = 23;
	public static readonly FOR = 24;
	public static readonly DO = 25;
	public static readonly WHILE = 26;
	public static readonly BREAK = 27;
	public static readonly TRY = 28;
	public static readonly CATCH = 29;
	public static readonly FINALLY = 30;
	public static readonly LPAR = 31;
	public static readonly RPAR = 32;
	public static readonly LBRAK = 33;
	public static readonly RBRAK = 34;
	public static readonly LCURL = 35;
	public static readonly RCURL = 36;
	public static readonly ARROW = 37;
	public static readonly GT = 38;
	public static readonly LT = 39;
	public static readonly LTE = 40;
	public static readonly GTE = 41;
	public static readonly EQUAL = 42;
	public static readonly NOT_EQUAL = 43;
	public static readonly NOT = 44;
	public static readonly AND = 45;
	public static readonly OR = 46;
	public static readonly QUESTION = 47;
	public static readonly SEMI = 48;
	public static readonly COLON = 49;
	public static readonly COMMA = 50;
	public static readonly DOT = 51;
	public static readonly AT = 52;
	public static readonly INC = 53;
	public static readonly DEC = 54;
	public static readonly PLUS = 55;
	public static readonly MINUS = 56;
	public static readonly STAR = 57;
	public static readonly SLASH = 58;
	public static readonly BSLASH = 59;
	public static readonly CARET = 60;
	public static readonly PERCENT = 61;
	public static readonly AMP = 62;
	public static readonly PIPE = 63;
	public static readonly ASSIGN = 64;
	public static readonly ADD_ASSIGN = 65;
	public static readonly SUB_ASSIGN = 66;
	public static readonly MUL_ASSIGN = 67;
	public static readonly DIV_ASSIGN = 68;
	public static readonly AND_ASSIGN = 69;
	public static readonly OR_ASSIGN = 70;
	public static readonly XOR_ASSIGN = 71;
	public static readonly MOD_ASSIGN = 72;
	public static readonly LSHIFT_ASSIGN = 73;
	public static readonly RSHIFT_ASSIGN = 74;
	public static readonly URSHIFT_ASSIGN = 75;
	public static readonly INTEGER_LITERAL = 76;
	public static readonly DECIMAL_LITERAL = 77;
	public static readonly BOOLEAN_LITERAL = 78;
	public static readonly CHAR_LITERAL = 79;
	public static readonly STRING_LITERAL = 80;
	public static readonly NULL_LITERAL = 81;
	public static readonly IDENTIFIER = 82;
	public static readonly WS = 83;
	public static readonly COMMENT = 84;
	public static readonly LINE_COMMENT = 85;
	public static readonly EOF = Token.EOF;

	public static readonly channelNames: string[] = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	public static readonly literalNames: string[] = [ null, "'i32'", "'i64'", 
                                                   "'u32'", "'u64'", "'f32'", 
                                                   "'f64'", "'v128'", "'string'", 
                                                   "'boolean'", "'void'", 
                                                   "'attribute'", "'abstract'", 
                                                   "'class'", "'extends'", 
                                                   "'static'", "'function'", 
                                                   "'let'", "'const'", "'return'", 
                                                   "'if'", "'else'", "'switch'", 
                                                   "'case'", "'for'", "'do'", 
                                                   "'while'", "'break'", 
                                                   "'try'", "'catch'", "'finally'", 
                                                   "'('", "')'", "'['", 
                                                   "']'", "'{'", "'}'", 
                                                   "'=>'", "'>'", "'<'", 
                                                   "'<='", "'>='", "'=='", 
                                                   "'!='", "'!'", "'&&'", 
                                                   "'||'", "'?'", "';'", 
                                                   "':'", "','", "'.'", 
                                                   "'@'", "'++'", "'--'", 
                                                   "'+'", "'-'", "'*'", 
                                                   "'/'", "'\\'", "'^'", 
                                                   "'%'", "'&'", "'|'", 
                                                   "'='", "'+='", "'-='", 
                                                   "'*='", "'/='", "'&='", 
                                                   "'|='", "'^='", "'%='", 
                                                   "'<<='", "'>>='", "'>>>='", 
                                                   null, null, null, null, 
                                                   null, "'null'" ];
	public static readonly symbolicNames: string[] = [ null, "I32", "I64", 
                                                    "U32", "U64", "F32", 
                                                    "F64", "V128", "STRING", 
                                                    "BOOLEAN", "VOID", "ATTRIBUTE", 
                                                    "ABSTRACT", "CLASS", 
                                                    "EXTENDS", "STATIC", 
                                                    "FUNCTION", "LET", "CONST", 
                                                    "RETURN", "IF", "ELSE", 
                                                    "SWITCH", "CASE", "FOR", 
                                                    "DO", "WHILE", "BREAK", 
                                                    "TRY", "CATCH", "FINALLY", 
                                                    "LPAR", "RPAR", "LBRAK", 
                                                    "RBRAK", "LCURL", "RCURL", 
                                                    "ARROW", "GT", "LT", 
                                                    "LTE", "GTE", "EQUAL", 
                                                    "NOT_EQUAL", "NOT", 
                                                    "AND", "OR", "QUESTION", 
                                                    "SEMI", "COLON", "COMMA", 
                                                    "DOT", "AT", "INC", 
                                                    "DEC", "PLUS", "MINUS", 
                                                    "STAR", "SLASH", "BSLASH", 
                                                    "CARET", "PERCENT", 
                                                    "AMP", "PIPE", "ASSIGN", 
                                                    "ADD_ASSIGN", "SUB_ASSIGN", 
                                                    "MUL_ASSIGN", "DIV_ASSIGN", 
                                                    "AND_ASSIGN", "OR_ASSIGN", 
                                                    "XOR_ASSIGN", "MOD_ASSIGN", 
                                                    "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", 
                                                    "URSHIFT_ASSIGN", "INTEGER_LITERAL", 
                                                    "DECIMAL_LITERAL", "BOOLEAN_LITERAL", 
                                                    "CHAR_LITERAL", "STRING_LITERAL", 
                                                    "NULL_LITERAL", "IDENTIFIER", 
                                                    "WS", "COMMENT", "LINE_COMMENT" ];
	public static readonly modeNames: string[] = [ "DEFAULT_MODE", ];

	public static readonly ruleNames: string[] = [
		"I32", "I64", "U32", "U64", "F32", "F64", "V128", "STRING", "BOOLEAN", 
		"VOID", "ATTRIBUTE", "ABSTRACT", "CLASS", "EXTENDS", "STATIC", "FUNCTION", 
		"LET", "CONST", "RETURN", "IF", "ELSE", "SWITCH", "CASE", "FOR", "DO", 
		"WHILE", "BREAK", "TRY", "CATCH", "FINALLY", "LPAR", "RPAR", "LBRAK", 
		"RBRAK", "LCURL", "RCURL", "ARROW", "GT", "LT", "LTE", "GTE", "EQUAL", 
		"NOT_EQUAL", "NOT", "AND", "OR", "QUESTION", "SEMI", "COLON", "COMMA", 
		"DOT", "AT", "INC", "DEC", "PLUS", "MINUS", "STAR", "SLASH", "BSLASH", 
		"CARET", "PERCENT", "AMP", "PIPE", "ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN", 
		"MUL_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", 
		"LSHIFT_ASSIGN", "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", "INTEGER_LITERAL", 
		"DecimalIntegerLiteral", "HexIntegerLiteral", "OctalIntegerLiteral", "BinaryIntegerLiteral", 
		"IntegerTypeSuffix", "DecimalNumeral", "Digits", "Digit", "NonZeroDigit", 
		"DigitsAndUnderscores", "DigitOrUnderscore", "Underscores", "HexNumeral", 
		"HexDigits", "HexDigit", "HexDigitsAndUnderscores", "HexDigitOrUnderscore", 
		"OctalNumeral", "OctalDigits", "OctalDigit", "OctalDigitsAndUnderscores", 
		"OctalDigitOrUnderscore", "BinaryNumeral", "BinaryDigits", "BinaryDigit", 
		"BinaryDigitsAndUnderscores", "BinaryDigitOrUnderscore", "DECIMAL_LITERAL", 
		"DecimalFloatingPointLiteral", "ExponentPart", "ExponentIndicator", "SignedInteger", 
		"Sign", "FloatTypeSuffix", "HexadecimalFloatingPointLiteral", "HexSignificand", 
		"BinaryExponent", "BinaryExponentIndicator", "BOOLEAN_LITERAL", "CHAR_LITERAL", 
		"SingleCharacter", "STRING_LITERAL", "StringCharacters", "StringCharacter", 
		"EscapeSequence", "OctalEscape", "ZeroToThree", "UnicodeEscape", "NULL_LITERAL", 
		"IDENTIFIER", "Letter", "LetterOrDigit", "WS", "COMMENT", "LINE_COMMENT",
	];


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(this, ComposeLexer._ATN, ComposeLexer.DecisionsToDFA, new PredictionContextCache());
	}

	public get grammarFileName(): string { return "ComposeLexer.g4"; }

	public get literalNames(): (string | null)[] { return ComposeLexer.literalNames; }
	public get symbolicNames(): (string | null)[] { return ComposeLexer.symbolicNames; }
	public get ruleNames(): string[] { return ComposeLexer.ruleNames; }

	public get serializedATN(): number[] { return ComposeLexer._serializedATN; }

	public get channelNames(): string[] { return ComposeLexer.channelNames; }

	public get modeNames(): string[] { return ComposeLexer.modeNames; }

	public static readonly _serializedATN: number[] = [4,0,85,868,6,-1,2,0,
	7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,
	7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,
	16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,
	2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,
	31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,
	7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
	45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
	2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,
	60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,
	7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,
	74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,
	2,82,7,82,2,83,7,83,2,84,7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,
	89,7,89,2,90,7,90,2,91,7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,
	7,96,2,97,7,97,2,98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,
	2,103,7,103,2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,
	2,109,7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
	2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,
	2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,
	2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,1,0,1,0,1,0,1,0,1,1,1,1,
	1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,
	1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,
	1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
	1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,
	12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,
	1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,
	16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,
	1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
	22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,
	1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,
	28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,
	1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,37,1,
	37,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,
	1,43,1,43,1,44,1,44,1,44,1,45,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,
	49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,52,1,53,1,53,1,53,1,54,1,54,1,55,
	1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,
	62,1,63,1,63,1,64,1,64,1,64,1,65,1,65,1,65,1,66,1,66,1,66,1,67,1,67,1,67,
	1,68,1,68,1,68,1,69,1,69,1,69,1,70,1,70,1,70,1,71,1,71,1,71,1,72,1,72,1,
	72,1,72,1,73,1,73,1,73,1,73,1,74,1,74,1,74,1,74,1,74,1,75,1,75,1,75,1,75,
	3,75,554,8,75,1,76,1,76,3,76,558,8,76,1,77,1,77,3,77,562,8,77,1,78,1,78,
	3,78,566,8,78,1,79,1,79,3,79,570,8,79,1,80,1,80,1,81,1,81,1,81,3,81,577,
	8,81,1,81,1,81,1,81,3,81,582,8,81,3,81,584,8,81,1,82,1,82,3,82,588,8,82,
	1,82,3,82,591,8,82,1,83,1,83,3,83,595,8,83,1,84,1,84,1,85,4,85,600,8,85,
	11,85,12,85,601,1,86,1,86,3,86,606,8,86,1,87,4,87,609,8,87,11,87,12,87,
	610,1,88,1,88,1,88,1,88,1,89,1,89,3,89,619,8,89,1,89,3,89,622,8,89,1,90,
	1,90,1,91,4,91,627,8,91,11,91,12,91,628,1,92,1,92,3,92,633,8,92,1,93,1,
	93,3,93,637,8,93,1,93,1,93,1,94,1,94,3,94,643,8,94,1,94,3,94,646,8,94,1,
	95,1,95,1,96,4,96,651,8,96,11,96,12,96,652,1,97,1,97,3,97,657,8,97,1,98,
	1,98,1,98,1,98,1,99,1,99,3,99,665,8,99,1,99,3,99,668,8,99,1,100,1,100,1,
	101,4,101,673,8,101,11,101,12,101,674,1,102,1,102,3,102,679,8,102,1,103,
	1,103,3,103,683,8,103,1,104,1,104,1,104,3,104,688,8,104,1,104,3,104,691,
	8,104,1,104,3,104,694,8,104,1,104,1,104,1,104,3,104,699,8,104,1,104,3,104,
	702,8,104,1,104,1,104,1,104,3,104,707,8,104,1,104,1,104,1,104,3,104,712,
	8,104,1,105,1,105,1,105,1,106,1,106,1,107,3,107,720,8,107,1,107,1,107,1,
	108,1,108,1,109,1,109,1,110,1,110,1,110,3,110,731,8,110,1,111,1,111,3,111,
	735,8,111,1,111,1,111,1,111,3,111,740,8,111,1,111,1,111,3,111,744,8,111,
	1,112,1,112,1,112,1,113,1,113,1,114,1,114,1,114,1,114,1,114,1,114,1,114,
	1,114,1,114,3,114,760,8,114,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,
	115,3,115,770,8,115,1,116,1,116,1,117,1,117,3,117,776,8,117,1,117,1,117,
	1,118,4,118,781,8,118,11,118,12,118,782,1,119,1,119,3,119,787,8,119,1,120,
	1,120,1,120,1,120,3,120,793,8,120,1,121,1,121,1,121,1,121,1,121,1,121,1,
	121,1,121,1,121,1,121,1,121,3,121,806,8,121,1,122,1,122,1,123,1,123,4,123,
	812,8,123,11,123,12,123,813,1,123,1,123,1,123,1,123,1,123,1,124,1,124,1,
	124,1,124,1,124,1,125,1,125,5,125,828,8,125,10,125,12,125,831,9,125,1,126,
	1,126,1,127,1,127,1,128,4,128,838,8,128,11,128,12,128,839,1,128,1,128,1,
	129,1,129,1,129,1,129,5,129,848,8,129,10,129,12,129,851,9,129,1,129,1,129,
	1,129,1,129,1,129,1,130,1,130,1,130,1,130,5,130,862,8,130,10,130,12,130,
	865,9,130,1,130,1,130,1,849,0,131,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
	9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
	21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,
	33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,
	45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,
	56,113,57,115,58,117,59,119,60,121,61,123,62,125,63,127,64,129,65,131,66,
	133,67,135,68,137,69,139,70,141,71,143,72,145,73,147,74,149,75,151,76,153,
	0,155,0,157,0,159,0,161,0,163,0,165,0,167,0,169,0,171,0,173,0,175,0,177,
	0,179,0,181,0,183,0,185,0,187,0,189,0,191,0,193,0,195,0,197,0,199,0,201,
	0,203,0,205,0,207,77,209,0,211,0,213,0,215,0,217,0,219,0,221,0,223,0,225,
	0,227,0,229,78,231,79,233,0,235,80,237,0,239,0,241,0,243,0,245,0,247,0,
	249,81,251,82,253,0,255,0,257,83,259,84,261,85,1,0,19,2,0,76,76,108,108,
	1,0,49,57,2,0,88,88,120,120,3,0,48,57,65,70,97,102,1,0,48,55,2,0,66,66,
	98,98,1,0,48,49,2,0,69,69,101,101,2,0,43,43,45,45,4,0,68,68,70,70,100,100,
	102,102,2,0,80,80,112,112,4,0,10,10,13,13,39,39,92,92,4,0,10,10,13,13,34,
	34,92,92,8,0,34,34,39,39,92,92,98,98,102,102,110,110,114,114,116,116,1,
	0,48,51,4,0,36,36,65,90,95,95,97,122,5,0,36,36,48,57,65,90,95,95,97,122,
	3,0,9,10,12,13,32,32,2,0,10,10,13,13,879,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
	0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
	17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,
	0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,
	39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,
	0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,
	61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,
	0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,
	83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,
	0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,
	0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,
	115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,
	1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,
	0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,
	0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,207,1,0,0,0,0,229,1,0,0,
	0,0,231,1,0,0,0,0,235,1,0,0,0,0,249,1,0,0,0,0,251,1,0,0,0,0,257,1,0,0,0,
	0,259,1,0,0,0,0,261,1,0,0,0,1,263,1,0,0,0,3,267,1,0,0,0,5,271,1,0,0,0,7,
	275,1,0,0,0,9,279,1,0,0,0,11,283,1,0,0,0,13,287,1,0,0,0,15,292,1,0,0,0,
	17,299,1,0,0,0,19,307,1,0,0,0,21,312,1,0,0,0,23,322,1,0,0,0,25,331,1,0,
	0,0,27,337,1,0,0,0,29,345,1,0,0,0,31,352,1,0,0,0,33,361,1,0,0,0,35,365,
	1,0,0,0,37,371,1,0,0,0,39,378,1,0,0,0,41,381,1,0,0,0,43,386,1,0,0,0,45,
	393,1,0,0,0,47,398,1,0,0,0,49,402,1,0,0,0,51,405,1,0,0,0,53,411,1,0,0,0,
	55,417,1,0,0,0,57,421,1,0,0,0,59,427,1,0,0,0,61,435,1,0,0,0,63,437,1,0,
	0,0,65,439,1,0,0,0,67,441,1,0,0,0,69,443,1,0,0,0,71,445,1,0,0,0,73,447,
	1,0,0,0,75,450,1,0,0,0,77,452,1,0,0,0,79,454,1,0,0,0,81,457,1,0,0,0,83,
	460,1,0,0,0,85,463,1,0,0,0,87,466,1,0,0,0,89,468,1,0,0,0,91,471,1,0,0,0,
	93,474,1,0,0,0,95,476,1,0,0,0,97,478,1,0,0,0,99,480,1,0,0,0,101,482,1,0,
	0,0,103,484,1,0,0,0,105,486,1,0,0,0,107,489,1,0,0,0,109,492,1,0,0,0,111,
	494,1,0,0,0,113,496,1,0,0,0,115,498,1,0,0,0,117,500,1,0,0,0,119,502,1,0,
	0,0,121,504,1,0,0,0,123,506,1,0,0,0,125,508,1,0,0,0,127,510,1,0,0,0,129,
	512,1,0,0,0,131,515,1,0,0,0,133,518,1,0,0,0,135,521,1,0,0,0,137,524,1,0,
	0,0,139,527,1,0,0,0,141,530,1,0,0,0,143,533,1,0,0,0,145,536,1,0,0,0,147,
	540,1,0,0,0,149,544,1,0,0,0,151,553,1,0,0,0,153,555,1,0,0,0,155,559,1,0,
	0,0,157,563,1,0,0,0,159,567,1,0,0,0,161,571,1,0,0,0,163,583,1,0,0,0,165,
	585,1,0,0,0,167,594,1,0,0,0,169,596,1,0,0,0,171,599,1,0,0,0,173,605,1,0,
	0,0,175,608,1,0,0,0,177,612,1,0,0,0,179,616,1,0,0,0,181,623,1,0,0,0,183,
	626,1,0,0,0,185,632,1,0,0,0,187,634,1,0,0,0,189,640,1,0,0,0,191,647,1,0,
	0,0,193,650,1,0,0,0,195,656,1,0,0,0,197,658,1,0,0,0,199,662,1,0,0,0,201,
	669,1,0,0,0,203,672,1,0,0,0,205,678,1,0,0,0,207,682,1,0,0,0,209,711,1,0,
	0,0,211,713,1,0,0,0,213,716,1,0,0,0,215,719,1,0,0,0,217,723,1,0,0,0,219,
	725,1,0,0,0,221,727,1,0,0,0,223,743,1,0,0,0,225,745,1,0,0,0,227,748,1,0,
	0,0,229,759,1,0,0,0,231,769,1,0,0,0,233,771,1,0,0,0,235,773,1,0,0,0,237,
	780,1,0,0,0,239,786,1,0,0,0,241,792,1,0,0,0,243,805,1,0,0,0,245,807,1,0,
	0,0,247,809,1,0,0,0,249,820,1,0,0,0,251,825,1,0,0,0,253,832,1,0,0,0,255,
	834,1,0,0,0,257,837,1,0,0,0,259,843,1,0,0,0,261,857,1,0,0,0,263,264,5,105,
	0,0,264,265,5,51,0,0,265,266,5,50,0,0,266,2,1,0,0,0,267,268,5,105,0,0,268,
	269,5,54,0,0,269,270,5,52,0,0,270,4,1,0,0,0,271,272,5,117,0,0,272,273,5,
	51,0,0,273,274,5,50,0,0,274,6,1,0,0,0,275,276,5,117,0,0,276,277,5,54,0,
	0,277,278,5,52,0,0,278,8,1,0,0,0,279,280,5,102,0,0,280,281,5,51,0,0,281,
	282,5,50,0,0,282,10,1,0,0,0,283,284,5,102,0,0,284,285,5,54,0,0,285,286,
	5,52,0,0,286,12,1,0,0,0,287,288,5,118,0,0,288,289,5,49,0,0,289,290,5,50,
	0,0,290,291,5,56,0,0,291,14,1,0,0,0,292,293,5,115,0,0,293,294,5,116,0,0,
	294,295,5,114,0,0,295,296,5,105,0,0,296,297,5,110,0,0,297,298,5,103,0,0,
	298,16,1,0,0,0,299,300,5,98,0,0,300,301,5,111,0,0,301,302,5,111,0,0,302,
	303,5,108,0,0,303,304,5,101,0,0,304,305,5,97,0,0,305,306,5,110,0,0,306,
	18,1,0,0,0,307,308,5,118,0,0,308,309,5,111,0,0,309,310,5,105,0,0,310,311,
	5,100,0,0,311,20,1,0,0,0,312,313,5,97,0,0,313,314,5,116,0,0,314,315,5,116,
	0,0,315,316,5,114,0,0,316,317,5,105,0,0,317,318,5,98,0,0,318,319,5,117,
	0,0,319,320,5,116,0,0,320,321,5,101,0,0,321,22,1,0,0,0,322,323,5,97,0,0,
	323,324,5,98,0,0,324,325,5,115,0,0,325,326,5,116,0,0,326,327,5,114,0,0,
	327,328,5,97,0,0,328,329,5,99,0,0,329,330,5,116,0,0,330,24,1,0,0,0,331,
	332,5,99,0,0,332,333,5,108,0,0,333,334,5,97,0,0,334,335,5,115,0,0,335,336,
	5,115,0,0,336,26,1,0,0,0,337,338,5,101,0,0,338,339,5,120,0,0,339,340,5,
	116,0,0,340,341,5,101,0,0,341,342,5,110,0,0,342,343,5,100,0,0,343,344,5,
	115,0,0,344,28,1,0,0,0,345,346,5,115,0,0,346,347,5,116,0,0,347,348,5,97,
	0,0,348,349,5,116,0,0,349,350,5,105,0,0,350,351,5,99,0,0,351,30,1,0,0,0,
	352,353,5,102,0,0,353,354,5,117,0,0,354,355,5,110,0,0,355,356,5,99,0,0,
	356,357,5,116,0,0,357,358,5,105,0,0,358,359,5,111,0,0,359,360,5,110,0,0,
	360,32,1,0,0,0,361,362,5,108,0,0,362,363,5,101,0,0,363,364,5,116,0,0,364,
	34,1,0,0,0,365,366,5,99,0,0,366,367,5,111,0,0,367,368,5,110,0,0,368,369,
	5,115,0,0,369,370,5,116,0,0,370,36,1,0,0,0,371,372,5,114,0,0,372,373,5,
	101,0,0,373,374,5,116,0,0,374,375,5,117,0,0,375,376,5,114,0,0,376,377,5,
	110,0,0,377,38,1,0,0,0,378,379,5,105,0,0,379,380,5,102,0,0,380,40,1,0,0,
	0,381,382,5,101,0,0,382,383,5,108,0,0,383,384,5,115,0,0,384,385,5,101,0,
	0,385,42,1,0,0,0,386,387,5,115,0,0,387,388,5,119,0,0,388,389,5,105,0,0,
	389,390,5,116,0,0,390,391,5,99,0,0,391,392,5,104,0,0,392,44,1,0,0,0,393,
	394,5,99,0,0,394,395,5,97,0,0,395,396,5,115,0,0,396,397,5,101,0,0,397,46,
	1,0,0,0,398,399,5,102,0,0,399,400,5,111,0,0,400,401,5,114,0,0,401,48,1,
	0,0,0,402,403,5,100,0,0,403,404,5,111,0,0,404,50,1,0,0,0,405,406,5,119,
	0,0,406,407,5,104,0,0,407,408,5,105,0,0,408,409,5,108,0,0,409,410,5,101,
	0,0,410,52,1,0,0,0,411,412,5,98,0,0,412,413,5,114,0,0,413,414,5,101,0,0,
	414,415,5,97,0,0,415,416,5,107,0,0,416,54,1,0,0,0,417,418,5,116,0,0,418,
	419,5,114,0,0,419,420,5,121,0,0,420,56,1,0,0,0,421,422,5,99,0,0,422,423,
	5,97,0,0,423,424,5,116,0,0,424,425,5,99,0,0,425,426,5,104,0,0,426,58,1,
	0,0,0,427,428,5,102,0,0,428,429,5,105,0,0,429,430,5,110,0,0,430,431,5,97,
	0,0,431,432,5,108,0,0,432,433,5,108,0,0,433,434,5,121,0,0,434,60,1,0,0,
	0,435,436,5,40,0,0,436,62,1,0,0,0,437,438,5,41,0,0,438,64,1,0,0,0,439,440,
	5,91,0,0,440,66,1,0,0,0,441,442,5,93,0,0,442,68,1,0,0,0,443,444,5,123,0,
	0,444,70,1,0,0,0,445,446,5,125,0,0,446,72,1,0,0,0,447,448,5,61,0,0,448,
	449,5,62,0,0,449,74,1,0,0,0,450,451,5,62,0,0,451,76,1,0,0,0,452,453,5,60,
	0,0,453,78,1,0,0,0,454,455,5,60,0,0,455,456,5,61,0,0,456,80,1,0,0,0,457,
	458,5,62,0,0,458,459,5,61,0,0,459,82,1,0,0,0,460,461,5,61,0,0,461,462,5,
	61,0,0,462,84,1,0,0,0,463,464,5,33,0,0,464,465,5,61,0,0,465,86,1,0,0,0,
	466,467,5,33,0,0,467,88,1,0,0,0,468,469,5,38,0,0,469,470,5,38,0,0,470,90,
	1,0,0,0,471,472,5,124,0,0,472,473,5,124,0,0,473,92,1,0,0,0,474,475,5,63,
	0,0,475,94,1,0,0,0,476,477,5,59,0,0,477,96,1,0,0,0,478,479,5,58,0,0,479,
	98,1,0,0,0,480,481,5,44,0,0,481,100,1,0,0,0,482,483,5,46,0,0,483,102,1,
	0,0,0,484,485,5,64,0,0,485,104,1,0,0,0,486,487,5,43,0,0,487,488,5,43,0,
	0,488,106,1,0,0,0,489,490,5,45,0,0,490,491,5,45,0,0,491,108,1,0,0,0,492,
	493,5,43,0,0,493,110,1,0,0,0,494,495,5,45,0,0,495,112,1,0,0,0,496,497,5,
	42,0,0,497,114,1,0,0,0,498,499,5,47,0,0,499,116,1,0,0,0,500,501,5,92,0,
	0,501,118,1,0,0,0,502,503,5,94,0,0,503,120,1,0,0,0,504,505,5,37,0,0,505,
	122,1,0,0,0,506,507,5,38,0,0,507,124,1,0,0,0,508,509,5,124,0,0,509,126,
	1,0,0,0,510,511,5,61,0,0,511,128,1,0,0,0,512,513,5,43,0,0,513,514,5,61,
	0,0,514,130,1,0,0,0,515,516,5,45,0,0,516,517,5,61,0,0,517,132,1,0,0,0,518,
	519,5,42,0,0,519,520,5,61,0,0,520,134,1,0,0,0,521,522,5,47,0,0,522,523,
	5,61,0,0,523,136,1,0,0,0,524,525,5,38,0,0,525,526,5,61,0,0,526,138,1,0,
	0,0,527,528,5,124,0,0,528,529,5,61,0,0,529,140,1,0,0,0,530,531,5,94,0,0,
	531,532,5,61,0,0,532,142,1,0,0,0,533,534,5,37,0,0,534,535,5,61,0,0,535,
	144,1,0,0,0,536,537,5,60,0,0,537,538,5,60,0,0,538,539,5,61,0,0,539,146,
	1,0,0,0,540,541,5,62,0,0,541,542,5,62,0,0,542,543,5,61,0,0,543,148,1,0,
	0,0,544,545,5,62,0,0,545,546,5,62,0,0,546,547,5,62,0,0,547,548,5,61,0,0,
	548,150,1,0,0,0,549,554,3,153,76,0,550,554,3,155,77,0,551,554,3,157,78,
	0,552,554,3,159,79,0,553,549,1,0,0,0,553,550,1,0,0,0,553,551,1,0,0,0,553,
	552,1,0,0,0,554,152,1,0,0,0,555,557,3,163,81,0,556,558,3,161,80,0,557,556,
	1,0,0,0,557,558,1,0,0,0,558,154,1,0,0,0,559,561,3,177,88,0,560,562,3,161,
	80,0,561,560,1,0,0,0,561,562,1,0,0,0,562,156,1,0,0,0,563,565,3,187,93,0,
	564,566,3,161,80,0,565,564,1,0,0,0,565,566,1,0,0,0,566,158,1,0,0,0,567,
	569,3,197,98,0,568,570,3,161,80,0,569,568,1,0,0,0,569,570,1,0,0,0,570,160,
	1,0,0,0,571,572,7,0,0,0,572,162,1,0,0,0,573,584,5,48,0,0,574,581,3,169,
	84,0,575,577,3,165,82,0,576,575,1,0,0,0,576,577,1,0,0,0,577,582,1,0,0,0,
	578,579,3,175,87,0,579,580,3,165,82,0,580,582,1,0,0,0,581,576,1,0,0,0,581,
	578,1,0,0,0,582,584,1,0,0,0,583,573,1,0,0,0,583,574,1,0,0,0,584,164,1,0,
	0,0,585,590,3,167,83,0,586,588,3,171,85,0,587,586,1,0,0,0,587,588,1,0,0,
	0,588,589,1,0,0,0,589,591,3,167,83,0,590,587,1,0,0,0,590,591,1,0,0,0,591,
	166,1,0,0,0,592,595,5,48,0,0,593,595,3,169,84,0,594,592,1,0,0,0,594,593,
	1,0,0,0,595,168,1,0,0,0,596,597,7,1,0,0,597,170,1,0,0,0,598,600,3,173,86,
	0,599,598,1,0,0,0,600,601,1,0,0,0,601,599,1,0,0,0,601,602,1,0,0,0,602,172,
	1,0,0,0,603,606,3,167,83,0,604,606,5,95,0,0,605,603,1,0,0,0,605,604,1,0,
	0,0,606,174,1,0,0,0,607,609,5,95,0,0,608,607,1,0,0,0,609,610,1,0,0,0,610,
	608,1,0,0,0,610,611,1,0,0,0,611,176,1,0,0,0,612,613,5,48,0,0,613,614,7,
	2,0,0,614,615,3,179,89,0,615,178,1,0,0,0,616,621,3,181,90,0,617,619,3,183,
	91,0,618,617,1,0,0,0,618,619,1,0,0,0,619,620,1,0,0,0,620,622,3,181,90,0,
	621,618,1,0,0,0,621,622,1,0,0,0,622,180,1,0,0,0,623,624,7,3,0,0,624,182,
	1,0,0,0,625,627,3,185,92,0,626,625,1,0,0,0,627,628,1,0,0,0,628,626,1,0,
	0,0,628,629,1,0,0,0,629,184,1,0,0,0,630,633,3,181,90,0,631,633,5,95,0,0,
	632,630,1,0,0,0,632,631,1,0,0,0,633,186,1,0,0,0,634,636,5,48,0,0,635,637,
	3,175,87,0,636,635,1,0,0,0,636,637,1,0,0,0,637,638,1,0,0,0,638,639,3,189,
	94,0,639,188,1,0,0,0,640,645,3,191,95,0,641,643,3,193,96,0,642,641,1,0,
	0,0,642,643,1,0,0,0,643,644,1,0,0,0,644,646,3,191,95,0,645,642,1,0,0,0,
	645,646,1,0,0,0,646,190,1,0,0,0,647,648,7,4,0,0,648,192,1,0,0,0,649,651,
	3,195,97,0,650,649,1,0,0,0,651,652,1,0,0,0,652,650,1,0,0,0,652,653,1,0,
	0,0,653,194,1,0,0,0,654,657,3,191,95,0,655,657,5,95,0,0,656,654,1,0,0,0,
	656,655,1,0,0,0,657,196,1,0,0,0,658,659,5,48,0,0,659,660,7,5,0,0,660,661,
	3,199,99,0,661,198,1,0,0,0,662,667,3,201,100,0,663,665,3,203,101,0,664,
	663,1,0,0,0,664,665,1,0,0,0,665,666,1,0,0,0,666,668,3,201,100,0,667,664,
	1,0,0,0,667,668,1,0,0,0,668,200,1,0,0,0,669,670,7,6,0,0,670,202,1,0,0,0,
	671,673,3,205,102,0,672,671,1,0,0,0,673,674,1,0,0,0,674,672,1,0,0,0,674,
	675,1,0,0,0,675,204,1,0,0,0,676,679,3,201,100,0,677,679,5,95,0,0,678,676,
	1,0,0,0,678,677,1,0,0,0,679,206,1,0,0,0,680,683,3,209,104,0,681,683,3,221,
	110,0,682,680,1,0,0,0,682,681,1,0,0,0,683,208,1,0,0,0,684,685,3,165,82,
	0,685,687,5,46,0,0,686,688,3,165,82,0,687,686,1,0,0,0,687,688,1,0,0,0,688,
	690,1,0,0,0,689,691,3,211,105,0,690,689,1,0,0,0,690,691,1,0,0,0,691,693,
	1,0,0,0,692,694,3,219,109,0,693,692,1,0,0,0,693,694,1,0,0,0,694,712,1,0,
	0,0,695,696,5,46,0,0,696,698,3,165,82,0,697,699,3,211,105,0,698,697,1,0,
	0,0,698,699,1,0,0,0,699,701,1,0,0,0,700,702,3,219,109,0,701,700,1,0,0,0,
	701,702,1,0,0,0,702,712,1,0,0,0,703,704,3,165,82,0,704,706,3,211,105,0,
	705,707,3,219,109,0,706,705,1,0,0,0,706,707,1,0,0,0,707,712,1,0,0,0,708,
	709,3,165,82,0,709,710,3,219,109,0,710,712,1,0,0,0,711,684,1,0,0,0,711,
	695,1,0,0,0,711,703,1,0,0,0,711,708,1,0,0,0,712,210,1,0,0,0,713,714,3,213,
	106,0,714,715,3,215,107,0,715,212,1,0,0,0,716,717,7,7,0,0,717,214,1,0,0,
	0,718,720,3,217,108,0,719,718,1,0,0,0,719,720,1,0,0,0,720,721,1,0,0,0,721,
	722,3,165,82,0,722,216,1,0,0,0,723,724,7,8,0,0,724,218,1,0,0,0,725,726,
	7,9,0,0,726,220,1,0,0,0,727,728,3,223,111,0,728,730,3,225,112,0,729,731,
	3,219,109,0,730,729,1,0,0,0,730,731,1,0,0,0,731,222,1,0,0,0,732,734,3,177,
	88,0,733,735,5,46,0,0,734,733,1,0,0,0,734,735,1,0,0,0,735,744,1,0,0,0,736,
	737,5,48,0,0,737,739,7,2,0,0,738,740,3,179,89,0,739,738,1,0,0,0,739,740,
	1,0,0,0,740,741,1,0,0,0,741,742,5,46,0,0,742,744,3,179,89,0,743,732,1,0,
	0,0,743,736,1,0,0,0,744,224,1,0,0,0,745,746,3,227,113,0,746,747,3,215,107,
	0,747,226,1,0,0,0,748,749,7,10,0,0,749,228,1,0,0,0,750,751,5,116,0,0,751,
	752,5,114,0,0,752,753,5,117,0,0,753,760,5,101,0,0,754,755,5,102,0,0,755,
	756,5,97,0,0,756,757,5,108,0,0,757,758,5,115,0,0,758,760,5,101,0,0,759,
	750,1,0,0,0,759,754,1,0,0,0,760,230,1,0,0,0,761,762,5,39,0,0,762,763,3,
	233,116,0,763,764,5,39,0,0,764,770,1,0,0,0,765,766,5,39,0,0,766,767,3,241,
	120,0,767,768,5,39,0,0,768,770,1,0,0,0,769,761,1,0,0,0,769,765,1,0,0,0,
	770,232,1,0,0,0,771,772,8,11,0,0,772,234,1,0,0,0,773,775,5,34,0,0,774,776,
	3,237,118,0,775,774,1,0,0,0,775,776,1,0,0,0,776,777,1,0,0,0,777,778,5,34,
	0,0,778,236,1,0,0,0,779,781,3,239,119,0,780,779,1,0,0,0,781,782,1,0,0,0,
	782,780,1,0,0,0,782,783,1,0,0,0,783,238,1,0,0,0,784,787,8,12,0,0,785,787,
	3,241,120,0,786,784,1,0,0,0,786,785,1,0,0,0,787,240,1,0,0,0,788,789,5,92,
	0,0,789,793,7,13,0,0,790,793,3,243,121,0,791,793,3,247,123,0,792,788,1,
	0,0,0,792,790,1,0,0,0,792,791,1,0,0,0,793,242,1,0,0,0,794,795,5,92,0,0,
	795,806,3,191,95,0,796,797,5,92,0,0,797,798,3,191,95,0,798,799,3,191,95,
	0,799,806,1,0,0,0,800,801,5,92,0,0,801,802,3,245,122,0,802,803,3,191,95,
	0,803,804,3,191,95,0,804,806,1,0,0,0,805,794,1,0,0,0,805,796,1,0,0,0,805,
	800,1,0,0,0,806,244,1,0,0,0,807,808,7,14,0,0,808,246,1,0,0,0,809,811,5,
	92,0,0,810,812,5,117,0,0,811,810,1,0,0,0,812,813,1,0,0,0,813,811,1,0,0,
	0,813,814,1,0,0,0,814,815,1,0,0,0,815,816,3,181,90,0,816,817,3,181,90,0,
	817,818,3,181,90,0,818,819,3,181,90,0,819,248,1,0,0,0,820,821,5,110,0,0,
	821,822,5,117,0,0,822,823,5,108,0,0,823,824,5,108,0,0,824,250,1,0,0,0,825,
	829,3,253,126,0,826,828,3,255,127,0,827,826,1,0,0,0,828,831,1,0,0,0,829,
	827,1,0,0,0,829,830,1,0,0,0,830,252,1,0,0,0,831,829,1,0,0,0,832,833,7,15,
	0,0,833,254,1,0,0,0,834,835,7,16,0,0,835,256,1,0,0,0,836,838,7,17,0,0,837,
	836,1,0,0,0,838,839,1,0,0,0,839,837,1,0,0,0,839,840,1,0,0,0,840,841,1,0,
	0,0,841,842,6,128,0,0,842,258,1,0,0,0,843,844,5,47,0,0,844,845,5,42,0,0,
	845,849,1,0,0,0,846,848,9,0,0,0,847,846,1,0,0,0,848,851,1,0,0,0,849,850,
	1,0,0,0,849,847,1,0,0,0,850,852,1,0,0,0,851,849,1,0,0,0,852,853,5,42,0,
	0,853,854,5,47,0,0,854,855,1,0,0,0,855,856,6,129,1,0,856,260,1,0,0,0,857,
	858,5,47,0,0,858,859,5,47,0,0,859,863,1,0,0,0,860,862,8,18,0,0,861,860,
	1,0,0,0,862,865,1,0,0,0,863,861,1,0,0,0,863,864,1,0,0,0,864,866,1,0,0,0,
	865,863,1,0,0,0,866,867,6,130,1,0,867,262,1,0,0,0,53,0,553,557,561,565,
	569,576,581,583,587,590,594,601,605,610,618,621,628,632,636,642,645,652,
	656,664,667,674,678,682,687,690,693,698,701,706,711,719,730,734,739,743,
	759,769,775,782,786,792,805,813,829,839,849,863,2,6,0,0,0,1,0];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!ComposeLexer.__ATN) {
			ComposeLexer.__ATN = new ATNDeserializer().deserialize(ComposeLexer._serializedATN);
		}

		return ComposeLexer.__ATN;
	}


	static DecisionsToDFA = ComposeLexer._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );
}