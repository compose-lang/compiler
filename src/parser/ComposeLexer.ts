// Generated from ComposeLexer.g4 by ANTLR 4.11.1
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols

import {
	ATN,
	ATNDeserializer,
	CharStream,
	DecisionState, DFA,
	Lexer,
	LexerATNSimulator,
	PredictionContextCache,
	Token
} from "antlr4";

export default class ComposeLexer extends Lexer {
	public static readonly I32 = 1;
	public static readonly I64 = 2;
	public static readonly U32 = 3;
	public static readonly U64 = 4;
	public static readonly F32 = 5;
	public static readonly F64 = 6;
	public static readonly V128 = 7;
	public static readonly STRING = 8;
	public static readonly BOOLEAN = 9;
	public static readonly VOID = 10;
	public static readonly ATTR = 11;
	public static readonly ABSTRACT = 12;
	public static readonly CLASS = 13;
	public static readonly EXTENDS = 14;
	public static readonly FN = 15;
	public static readonly IF = 16;
	public static readonly ELSE = 17;
	public static readonly FOR = 18;
	public static readonly DO = 19;
	public static readonly WHILE = 20;
	public static readonly BREAK = 21;
	public static readonly TRY = 22;
	public static readonly WHEN = 23;
	public static readonly LPAR = 24;
	public static readonly RPAR = 25;
	public static readonly LBRAK = 26;
	public static readonly RBRAK = 27;
	public static readonly LCURL = 28;
	public static readonly RCURL = 29;
	public static readonly ARROW = 30;
	public static readonly GT = 31;
	public static readonly LT = 32;
	public static readonly LTE = 33;
	public static readonly GTE = 34;
	public static readonly EQUAL = 35;
	public static readonly NOTEQUAL = 36;
	public static readonly BANG = 37;
	public static readonly AND = 38;
	public static readonly OR = 39;
	public static readonly QUESTION = 40;
	public static readonly COLON = 41;
	public static readonly COMMA = 42;
	public static readonly DOT = 43;
	public static readonly AT = 44;
	public static readonly INC = 45;
	public static readonly DEC = 46;
	public static readonly PLUS = 47;
	public static readonly MINUS = 48;
	public static readonly STAR = 49;
	public static readonly SLASH = 50;
	public static readonly BSLASH = 51;
	public static readonly CARET = 52;
	public static readonly PERCENT = 53;
	public static readonly AMP = 54;
	public static readonly PIPE = 55;
	public static readonly ASSIGN = 56;
	public static readonly ADD_ASSIGN = 57;
	public static readonly SUB_ASSIGN = 58;
	public static readonly MUL_ASSIGN = 59;
	public static readonly DIV_ASSIGN = 60;
	public static readonly AND_ASSIGN = 61;
	public static readonly OR_ASSIGN = 62;
	public static readonly XOR_ASSIGN = 63;
	public static readonly MOD_ASSIGN = 64;
	public static readonly LSHIFT_ASSIGN = 65;
	public static readonly RSHIFT_ASSIGN = 66;
	public static readonly URSHIFT_ASSIGN = 67;
	public static readonly INTEGER_LITERAL = 68;
	public static readonly DECIMAL_LITERAL = 69;
	public static readonly BOOLEAN_LITERAL = 70;
	public static readonly CHAR_LITERAL = 71;
	public static readonly STRING_LITERAL = 72;
	public static readonly NULL_LITERAL = 73;
	public static readonly IDENTIFIER = 74;
	public static readonly WS = 75;
	public static readonly COMMENT = 76;
	public static readonly LINE_COMMENT = 77;
	public static readonly EOF = Token.EOF;

	public static readonly channelNames: string[] = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	public static readonly literalNames = [ null, "'i32'", "'i64'", "'u32'", 
                                         "'u64'", "'f32'", "'f64'", "'v128'", 
                                         "'string'", "'boolean'", "'void'", 
                                         "'attr'", "'abstract'", "'class'", 
                                         "'extends'", "'fn'", "'if'", "'else'", 
                                         "'for'", "'do'", "'while'", "'break'", 
                                         "'try'", "'when'", "'('", "')'", 
                                         "'['", "']'", "'{'", "'}'", "'=>'", 
                                         "'>'", "'<'", "'<='", "'>='", "'=='", 
                                         "'!='", "'!'", "'&&'", "'||'", 
                                         "'?'", "':'", "','", "'.'", "'@'", 
                                         "'++'", "'--'", "'+'", "'-'", "'*'", 
                                         "'/'", "'\\'", "'^'", "'%'", "'&'", 
                                         "'|'", "'='", "'+='", "'-='", "'*='", 
                                         "'/='", "'&='", "'|='", "'^='", 
                                         "'%='", "'<<='", "'>>='", "'>>>='", 
                                         null, null, null, null, null, "'null'" ];
	public static readonly symbolicNames = [ null, "I32", "I64", "U32", "U64", 
                                          "F32", "F64", "V128", "STRING", 
                                          "BOOLEAN", "VOID", "ATTR", "ABSTRACT", 
                                          "CLASS", "EXTENDS", "FN", "IF", 
                                          "ELSE", "FOR", "DO", "WHILE", 
                                          "BREAK", "TRY", "WHEN", "LPAR", 
                                          "RPAR", "LBRAK", "RBRAK", "LCURL", 
                                          "RCURL", "ARROW", "GT", "LT", 
                                          "LTE", "GTE", "EQUAL", "NOTEQUAL", 
                                          "BANG", "AND", "OR", "QUESTION", 
                                          "COLON", "COMMA", "DOT", "AT", 
                                          "INC", "DEC", "PLUS", "MINUS", 
                                          "STAR", "SLASH", "BSLASH", "CARET", 
                                          "PERCENT", "AMP", "PIPE", "ASSIGN", 
                                          "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", 
                                          "DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", 
                                          "XOR_ASSIGN", "MOD_ASSIGN", "LSHIFT_ASSIGN", 
                                          "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", 
                                          "INTEGER_LITERAL", "DECIMAL_LITERAL", 
                                          "BOOLEAN_LITERAL", "CHAR_LITERAL", 
                                          "STRING_LITERAL", "NULL_LITERAL", 
                                          "IDENTIFIER", "WS", "COMMENT", 
                                          "LINE_COMMENT" ];
	public static readonly modeNames: string[] = [ "DEFAULT_MODE", ];

	public static readonly ruleNames: string[] = [
		"I32", "I64", "U32", "U64", "F32", "F64", "V128", "STRING", "BOOLEAN", 
		"VOID", "ATTR", "ABSTRACT", "CLASS", "EXTENDS", "FN", "IF", "ELSE", "FOR", 
		"DO", "WHILE", "BREAK", "TRY", "WHEN", "LPAR", "RPAR", "LBRAK", "RBRAK", 
		"LCURL", "RCURL", "ARROW", "GT", "LT", "LTE", "GTE", "EQUAL", "NOTEQUAL", 
		"BANG", "AND", "OR", "QUESTION", "COLON", "COMMA", "DOT", "AT", "INC", 
		"DEC", "PLUS", "MINUS", "STAR", "SLASH", "BSLASH", "CARET", "PERCENT", 
		"AMP", "PIPE", "ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", 
		"AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", "LSHIFT_ASSIGN", 
		"RSHIFT_ASSIGN", "URSHIFT_ASSIGN", "INTEGER_LITERAL", "DecimalIntegerLiteral", 
		"HexIntegerLiteral", "OctalIntegerLiteral", "BinaryIntegerLiteral", "IntegerTypeSuffix", 
		"DecimalNumeral", "Digits", "Digit", "NonZeroDigit", "DigitsAndUnderscores", 
		"DigitOrUnderscore", "Underscores", "HexNumeral", "HexDigits", "HexDigit", 
		"HexDigitsAndUnderscores", "HexDigitOrUnderscore", "OctalNumeral", "OctalDigits", 
		"OctalDigit", "OctalDigitsAndUnderscores", "OctalDigitOrUnderscore", "BinaryNumeral", 
		"BinaryDigits", "BinaryDigit", "BinaryDigitsAndUnderscores", "BinaryDigitOrUnderscore", 
		"DECIMAL_LITERAL", "DecimalFloatingPointLiteral", "ExponentPart", "ExponentIndicator", 
		"SignedInteger", "Sign", "FloatTypeSuffix", "HexadecimalFloatingPointLiteral", 
		"HexSignificand", "BinaryExponent", "BinaryExponentIndicator", "BOOLEAN_LITERAL", 
		"CHAR_LITERAL", "SingleCharacter", "STRING_LITERAL", "StringCharacters", 
		"StringCharacter", "EscapeSequence", "OctalEscape", "ZeroToThree", "UnicodeEscape", 
		"NULL_LITERAL", "IDENTIFIER", "Letter", "LetterOrDigit", "WS", "COMMENT", 
		"LINE_COMMENT",
	];


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(this, ComposeLexer._ATN, ComposeLexer.DecisionsToDFA, new PredictionContextCache());
	}

	public get grammarFileName(): string { return "ComposeLexer.g4"; }

	public get literalNames(): (string | null)[] { return ComposeLexer.literalNames; }
	public get symbolicNames(): (string | null)[] { return ComposeLexer.symbolicNames; }
	public get ruleNames(): string[] { return ComposeLexer.ruleNames; }

	public get serializedATN(): number[] { return ComposeLexer._serializedATN; }

	public get channelNames(): string[] { return ComposeLexer.channelNames; }

	public get modeNames(): string[] { return ComposeLexer.modeNames; }

	public static readonly _serializedATN: number[] = [4,0,77,794,6,-1,2,0,
	7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,
	7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,
	16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,
	2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,
	31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,
	7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
	45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
	2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,
	60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,
	7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,
	74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,
	2,82,7,82,2,83,7,83,2,84,7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,
	89,7,89,2,90,7,90,2,91,7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,
	7,96,2,97,7,97,2,98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,
	2,103,7,103,2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,
	2,109,7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
	2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,
	2,121,7,121,2,122,7,122,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,
	1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,
	1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,
	1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
	11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
	1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,
	17,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,
	1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,
	25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,31,1,31,
	1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,
	37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,
	1,43,1,44,1,44,1,44,1,45,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,
	49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,
	1,56,1,57,1,57,1,57,1,58,1,58,1,58,1,59,1,59,1,59,1,60,1,60,1,60,1,61,1,
	61,1,61,1,62,1,62,1,62,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,65,1,65,1,65,
	1,65,1,66,1,66,1,66,1,66,1,66,1,67,1,67,1,67,1,67,3,67,480,8,67,1,68,1,
	68,3,68,484,8,68,1,69,1,69,3,69,488,8,69,1,70,1,70,3,70,492,8,70,1,71,1,
	71,3,71,496,8,71,1,72,1,72,1,73,1,73,1,73,3,73,503,8,73,1,73,1,73,1,73,
	3,73,508,8,73,3,73,510,8,73,1,74,1,74,3,74,514,8,74,1,74,3,74,517,8,74,
	1,75,1,75,3,75,521,8,75,1,76,1,76,1,77,4,77,526,8,77,11,77,12,77,527,1,
	78,1,78,3,78,532,8,78,1,79,4,79,535,8,79,11,79,12,79,536,1,80,1,80,1,80,
	1,80,1,81,1,81,3,81,545,8,81,1,81,3,81,548,8,81,1,82,1,82,1,83,4,83,553,
	8,83,11,83,12,83,554,1,84,1,84,3,84,559,8,84,1,85,1,85,3,85,563,8,85,1,
	85,1,85,1,86,1,86,3,86,569,8,86,1,86,3,86,572,8,86,1,87,1,87,1,88,4,88,
	577,8,88,11,88,12,88,578,1,89,1,89,3,89,583,8,89,1,90,1,90,1,90,1,90,1,
	91,1,91,3,91,591,8,91,1,91,3,91,594,8,91,1,92,1,92,1,93,4,93,599,8,93,11,
	93,12,93,600,1,94,1,94,3,94,605,8,94,1,95,1,95,3,95,609,8,95,1,96,1,96,
	1,96,3,96,614,8,96,1,96,3,96,617,8,96,1,96,3,96,620,8,96,1,96,1,96,1,96,
	3,96,625,8,96,1,96,3,96,628,8,96,1,96,1,96,1,96,3,96,633,8,96,1,96,1,96,
	1,96,3,96,638,8,96,1,97,1,97,1,97,1,98,1,98,1,99,3,99,646,8,99,1,99,1,99,
	1,100,1,100,1,101,1,101,1,102,1,102,1,102,3,102,657,8,102,1,103,1,103,3,
	103,661,8,103,1,103,1,103,1,103,3,103,666,8,103,1,103,1,103,3,103,670,8,
	103,1,104,1,104,1,104,1,105,1,105,1,106,1,106,1,106,1,106,1,106,1,106,1,
	106,1,106,1,106,3,106,686,8,106,1,107,1,107,1,107,1,107,1,107,1,107,1,107,
	1,107,3,107,696,8,107,1,108,1,108,1,109,1,109,3,109,702,8,109,1,109,1,109,
	1,110,4,110,707,8,110,11,110,12,110,708,1,111,1,111,3,111,713,8,111,1,112,
	1,112,1,112,1,112,3,112,719,8,112,1,113,1,113,1,113,1,113,1,113,1,113,1,
	113,1,113,1,113,1,113,1,113,3,113,732,8,113,1,114,1,114,1,115,1,115,4,115,
	738,8,115,11,115,12,115,739,1,115,1,115,1,115,1,115,1,115,1,116,1,116,1,
	116,1,116,1,116,1,117,1,117,5,117,754,8,117,10,117,12,117,757,9,117,1,118,
	1,118,1,119,1,119,1,120,4,120,764,8,120,11,120,12,120,765,1,120,1,120,1,
	121,1,121,1,121,1,121,5,121,774,8,121,10,121,12,121,777,9,121,1,121,1,121,
	1,121,1,121,1,121,1,122,1,122,1,122,1,122,5,122,788,8,122,10,122,12,122,
	791,9,122,1,122,1,122,1,775,0,123,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
	9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
	21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,
	33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,
	45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,
	56,113,57,115,58,117,59,119,60,121,61,123,62,125,63,127,64,129,65,131,66,
	133,67,135,68,137,0,139,0,141,0,143,0,145,0,147,0,149,0,151,0,153,0,155,
	0,157,0,159,0,161,0,163,0,165,0,167,0,169,0,171,0,173,0,175,0,177,0,179,
	0,181,0,183,0,185,0,187,0,189,0,191,69,193,0,195,0,197,0,199,0,201,0,203,
	0,205,0,207,0,209,0,211,0,213,70,215,71,217,0,219,72,221,0,223,0,225,0,
	227,0,229,0,231,0,233,73,235,74,237,0,239,0,241,75,243,76,245,77,1,0,19,
	2,0,76,76,108,108,1,0,49,57,2,0,88,88,120,120,3,0,48,57,65,70,97,102,1,
	0,48,55,2,0,66,66,98,98,1,0,48,49,2,0,69,69,101,101,2,0,43,43,45,45,4,0,
	68,68,70,70,100,100,102,102,2,0,80,80,112,112,4,0,10,10,13,13,39,39,92,
	92,4,0,10,10,13,13,34,34,92,92,8,0,34,34,39,39,92,92,98,98,102,102,110,
	110,114,114,116,116,1,0,48,51,4,0,36,36,65,90,95,95,97,122,5,0,36,36,48,
	57,65,90,95,95,97,122,3,0,9,10,12,13,32,32,2,0,10,10,13,13,805,0,1,1,0,
	0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
	0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
	0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
	0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,
	0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,
	0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,
	0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,
	0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,
	0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,
	1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,
	0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,
	0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,
	0,0,133,1,0,0,0,0,135,1,0,0,0,0,191,1,0,0,0,0,213,1,0,0,0,0,215,1,0,0,0,
	0,219,1,0,0,0,0,233,1,0,0,0,0,235,1,0,0,0,0,241,1,0,0,0,0,243,1,0,0,0,0,
	245,1,0,0,0,1,247,1,0,0,0,3,251,1,0,0,0,5,255,1,0,0,0,7,259,1,0,0,0,9,263,
	1,0,0,0,11,267,1,0,0,0,13,271,1,0,0,0,15,276,1,0,0,0,17,283,1,0,0,0,19,
	291,1,0,0,0,21,296,1,0,0,0,23,301,1,0,0,0,25,310,1,0,0,0,27,316,1,0,0,0,
	29,324,1,0,0,0,31,327,1,0,0,0,33,330,1,0,0,0,35,335,1,0,0,0,37,339,1,0,
	0,0,39,342,1,0,0,0,41,348,1,0,0,0,43,354,1,0,0,0,45,358,1,0,0,0,47,363,
	1,0,0,0,49,365,1,0,0,0,51,367,1,0,0,0,53,369,1,0,0,0,55,371,1,0,0,0,57,
	373,1,0,0,0,59,375,1,0,0,0,61,378,1,0,0,0,63,380,1,0,0,0,65,382,1,0,0,0,
	67,385,1,0,0,0,69,388,1,0,0,0,71,391,1,0,0,0,73,394,1,0,0,0,75,396,1,0,
	0,0,77,399,1,0,0,0,79,402,1,0,0,0,81,404,1,0,0,0,83,406,1,0,0,0,85,408,
	1,0,0,0,87,410,1,0,0,0,89,412,1,0,0,0,91,415,1,0,0,0,93,418,1,0,0,0,95,
	420,1,0,0,0,97,422,1,0,0,0,99,424,1,0,0,0,101,426,1,0,0,0,103,428,1,0,0,
	0,105,430,1,0,0,0,107,432,1,0,0,0,109,434,1,0,0,0,111,436,1,0,0,0,113,438,
	1,0,0,0,115,441,1,0,0,0,117,444,1,0,0,0,119,447,1,0,0,0,121,450,1,0,0,0,
	123,453,1,0,0,0,125,456,1,0,0,0,127,459,1,0,0,0,129,462,1,0,0,0,131,466,
	1,0,0,0,133,470,1,0,0,0,135,479,1,0,0,0,137,481,1,0,0,0,139,485,1,0,0,0,
	141,489,1,0,0,0,143,493,1,0,0,0,145,497,1,0,0,0,147,509,1,0,0,0,149,511,
	1,0,0,0,151,520,1,0,0,0,153,522,1,0,0,0,155,525,1,0,0,0,157,531,1,0,0,0,
	159,534,1,0,0,0,161,538,1,0,0,0,163,542,1,0,0,0,165,549,1,0,0,0,167,552,
	1,0,0,0,169,558,1,0,0,0,171,560,1,0,0,0,173,566,1,0,0,0,175,573,1,0,0,0,
	177,576,1,0,0,0,179,582,1,0,0,0,181,584,1,0,0,0,183,588,1,0,0,0,185,595,
	1,0,0,0,187,598,1,0,0,0,189,604,1,0,0,0,191,608,1,0,0,0,193,637,1,0,0,0,
	195,639,1,0,0,0,197,642,1,0,0,0,199,645,1,0,0,0,201,649,1,0,0,0,203,651,
	1,0,0,0,205,653,1,0,0,0,207,669,1,0,0,0,209,671,1,0,0,0,211,674,1,0,0,0,
	213,685,1,0,0,0,215,695,1,0,0,0,217,697,1,0,0,0,219,699,1,0,0,0,221,706,
	1,0,0,0,223,712,1,0,0,0,225,718,1,0,0,0,227,731,1,0,0,0,229,733,1,0,0,0,
	231,735,1,0,0,0,233,746,1,0,0,0,235,751,1,0,0,0,237,758,1,0,0,0,239,760,
	1,0,0,0,241,763,1,0,0,0,243,769,1,0,0,0,245,783,1,0,0,0,247,248,5,105,0,
	0,248,249,5,51,0,0,249,250,5,50,0,0,250,2,1,0,0,0,251,252,5,105,0,0,252,
	253,5,54,0,0,253,254,5,52,0,0,254,4,1,0,0,0,255,256,5,117,0,0,256,257,5,
	51,0,0,257,258,5,50,0,0,258,6,1,0,0,0,259,260,5,117,0,0,260,261,5,54,0,
	0,261,262,5,52,0,0,262,8,1,0,0,0,263,264,5,102,0,0,264,265,5,51,0,0,265,
	266,5,50,0,0,266,10,1,0,0,0,267,268,5,102,0,0,268,269,5,54,0,0,269,270,
	5,52,0,0,270,12,1,0,0,0,271,272,5,118,0,0,272,273,5,49,0,0,273,274,5,50,
	0,0,274,275,5,56,0,0,275,14,1,0,0,0,276,277,5,115,0,0,277,278,5,116,0,0,
	278,279,5,114,0,0,279,280,5,105,0,0,280,281,5,110,0,0,281,282,5,103,0,0,
	282,16,1,0,0,0,283,284,5,98,0,0,284,285,5,111,0,0,285,286,5,111,0,0,286,
	287,5,108,0,0,287,288,5,101,0,0,288,289,5,97,0,0,289,290,5,110,0,0,290,
	18,1,0,0,0,291,292,5,118,0,0,292,293,5,111,0,0,293,294,5,105,0,0,294,295,
	5,100,0,0,295,20,1,0,0,0,296,297,5,97,0,0,297,298,5,116,0,0,298,299,5,116,
	0,0,299,300,5,114,0,0,300,22,1,0,0,0,301,302,5,97,0,0,302,303,5,98,0,0,
	303,304,5,115,0,0,304,305,5,116,0,0,305,306,5,114,0,0,306,307,5,97,0,0,
	307,308,5,99,0,0,308,309,5,116,0,0,309,24,1,0,0,0,310,311,5,99,0,0,311,
	312,5,108,0,0,312,313,5,97,0,0,313,314,5,115,0,0,314,315,5,115,0,0,315,
	26,1,0,0,0,316,317,5,101,0,0,317,318,5,120,0,0,318,319,5,116,0,0,319,320,
	5,101,0,0,320,321,5,110,0,0,321,322,5,100,0,0,322,323,5,115,0,0,323,28,
	1,0,0,0,324,325,5,102,0,0,325,326,5,110,0,0,326,30,1,0,0,0,327,328,5,105,
	0,0,328,329,5,102,0,0,329,32,1,0,0,0,330,331,5,101,0,0,331,332,5,108,0,
	0,332,333,5,115,0,0,333,334,5,101,0,0,334,34,1,0,0,0,335,336,5,102,0,0,
	336,337,5,111,0,0,337,338,5,114,0,0,338,36,1,0,0,0,339,340,5,100,0,0,340,
	341,5,111,0,0,341,38,1,0,0,0,342,343,5,119,0,0,343,344,5,104,0,0,344,345,
	5,105,0,0,345,346,5,108,0,0,346,347,5,101,0,0,347,40,1,0,0,0,348,349,5,
	98,0,0,349,350,5,114,0,0,350,351,5,101,0,0,351,352,5,97,0,0,352,353,5,107,
	0,0,353,42,1,0,0,0,354,355,5,116,0,0,355,356,5,114,0,0,356,357,5,121,0,
	0,357,44,1,0,0,0,358,359,5,119,0,0,359,360,5,104,0,0,360,361,5,101,0,0,
	361,362,5,110,0,0,362,46,1,0,0,0,363,364,5,40,0,0,364,48,1,0,0,0,365,366,
	5,41,0,0,366,50,1,0,0,0,367,368,5,91,0,0,368,52,1,0,0,0,369,370,5,93,0,
	0,370,54,1,0,0,0,371,372,5,123,0,0,372,56,1,0,0,0,373,374,5,125,0,0,374,
	58,1,0,0,0,375,376,5,61,0,0,376,377,5,62,0,0,377,60,1,0,0,0,378,379,5,62,
	0,0,379,62,1,0,0,0,380,381,5,60,0,0,381,64,1,0,0,0,382,383,5,60,0,0,383,
	384,5,61,0,0,384,66,1,0,0,0,385,386,5,62,0,0,386,387,5,61,0,0,387,68,1,
	0,0,0,388,389,5,61,0,0,389,390,5,61,0,0,390,70,1,0,0,0,391,392,5,33,0,0,
	392,393,5,61,0,0,393,72,1,0,0,0,394,395,5,33,0,0,395,74,1,0,0,0,396,397,
	5,38,0,0,397,398,5,38,0,0,398,76,1,0,0,0,399,400,5,124,0,0,400,401,5,124,
	0,0,401,78,1,0,0,0,402,403,5,63,0,0,403,80,1,0,0,0,404,405,5,58,0,0,405,
	82,1,0,0,0,406,407,5,44,0,0,407,84,1,0,0,0,408,409,5,46,0,0,409,86,1,0,
	0,0,410,411,5,64,0,0,411,88,1,0,0,0,412,413,5,43,0,0,413,414,5,43,0,0,414,
	90,1,0,0,0,415,416,5,45,0,0,416,417,5,45,0,0,417,92,1,0,0,0,418,419,5,43,
	0,0,419,94,1,0,0,0,420,421,5,45,0,0,421,96,1,0,0,0,422,423,5,42,0,0,423,
	98,1,0,0,0,424,425,5,47,0,0,425,100,1,0,0,0,426,427,5,92,0,0,427,102,1,
	0,0,0,428,429,5,94,0,0,429,104,1,0,0,0,430,431,5,37,0,0,431,106,1,0,0,0,
	432,433,5,38,0,0,433,108,1,0,0,0,434,435,5,124,0,0,435,110,1,0,0,0,436,
	437,5,61,0,0,437,112,1,0,0,0,438,439,5,43,0,0,439,440,5,61,0,0,440,114,
	1,0,0,0,441,442,5,45,0,0,442,443,5,61,0,0,443,116,1,0,0,0,444,445,5,42,
	0,0,445,446,5,61,0,0,446,118,1,0,0,0,447,448,5,47,0,0,448,449,5,61,0,0,
	449,120,1,0,0,0,450,451,5,38,0,0,451,452,5,61,0,0,452,122,1,0,0,0,453,454,
	5,124,0,0,454,455,5,61,0,0,455,124,1,0,0,0,456,457,5,94,0,0,457,458,5,61,
	0,0,458,126,1,0,0,0,459,460,5,37,0,0,460,461,5,61,0,0,461,128,1,0,0,0,462,
	463,5,60,0,0,463,464,5,60,0,0,464,465,5,61,0,0,465,130,1,0,0,0,466,467,
	5,62,0,0,467,468,5,62,0,0,468,469,5,61,0,0,469,132,1,0,0,0,470,471,5,62,
	0,0,471,472,5,62,0,0,472,473,5,62,0,0,473,474,5,61,0,0,474,134,1,0,0,0,
	475,480,3,137,68,0,476,480,3,139,69,0,477,480,3,141,70,0,478,480,3,143,
	71,0,479,475,1,0,0,0,479,476,1,0,0,0,479,477,1,0,0,0,479,478,1,0,0,0,480,
	136,1,0,0,0,481,483,3,147,73,0,482,484,3,145,72,0,483,482,1,0,0,0,483,484,
	1,0,0,0,484,138,1,0,0,0,485,487,3,161,80,0,486,488,3,145,72,0,487,486,1,
	0,0,0,487,488,1,0,0,0,488,140,1,0,0,0,489,491,3,171,85,0,490,492,3,145,
	72,0,491,490,1,0,0,0,491,492,1,0,0,0,492,142,1,0,0,0,493,495,3,181,90,0,
	494,496,3,145,72,0,495,494,1,0,0,0,495,496,1,0,0,0,496,144,1,0,0,0,497,
	498,7,0,0,0,498,146,1,0,0,0,499,510,5,48,0,0,500,507,3,153,76,0,501,503,
	3,149,74,0,502,501,1,0,0,0,502,503,1,0,0,0,503,508,1,0,0,0,504,505,3,159,
	79,0,505,506,3,149,74,0,506,508,1,0,0,0,507,502,1,0,0,0,507,504,1,0,0,0,
	508,510,1,0,0,0,509,499,1,0,0,0,509,500,1,0,0,0,510,148,1,0,0,0,511,516,
	3,151,75,0,512,514,3,155,77,0,513,512,1,0,0,0,513,514,1,0,0,0,514,515,1,
	0,0,0,515,517,3,151,75,0,516,513,1,0,0,0,516,517,1,0,0,0,517,150,1,0,0,
	0,518,521,5,48,0,0,519,521,3,153,76,0,520,518,1,0,0,0,520,519,1,0,0,0,521,
	152,1,0,0,0,522,523,7,1,0,0,523,154,1,0,0,0,524,526,3,157,78,0,525,524,
	1,0,0,0,526,527,1,0,0,0,527,525,1,0,0,0,527,528,1,0,0,0,528,156,1,0,0,0,
	529,532,3,151,75,0,530,532,5,95,0,0,531,529,1,0,0,0,531,530,1,0,0,0,532,
	158,1,0,0,0,533,535,5,95,0,0,534,533,1,0,0,0,535,536,1,0,0,0,536,534,1,
	0,0,0,536,537,1,0,0,0,537,160,1,0,0,0,538,539,5,48,0,0,539,540,7,2,0,0,
	540,541,3,163,81,0,541,162,1,0,0,0,542,547,3,165,82,0,543,545,3,167,83,
	0,544,543,1,0,0,0,544,545,1,0,0,0,545,546,1,0,0,0,546,548,3,165,82,0,547,
	544,1,0,0,0,547,548,1,0,0,0,548,164,1,0,0,0,549,550,7,3,0,0,550,166,1,0,
	0,0,551,553,3,169,84,0,552,551,1,0,0,0,553,554,1,0,0,0,554,552,1,0,0,0,
	554,555,1,0,0,0,555,168,1,0,0,0,556,559,3,165,82,0,557,559,5,95,0,0,558,
	556,1,0,0,0,558,557,1,0,0,0,559,170,1,0,0,0,560,562,5,48,0,0,561,563,3,
	159,79,0,562,561,1,0,0,0,562,563,1,0,0,0,563,564,1,0,0,0,564,565,3,173,
	86,0,565,172,1,0,0,0,566,571,3,175,87,0,567,569,3,177,88,0,568,567,1,0,
	0,0,568,569,1,0,0,0,569,570,1,0,0,0,570,572,3,175,87,0,571,568,1,0,0,0,
	571,572,1,0,0,0,572,174,1,0,0,0,573,574,7,4,0,0,574,176,1,0,0,0,575,577,
	3,179,89,0,576,575,1,0,0,0,577,578,1,0,0,0,578,576,1,0,0,0,578,579,1,0,
	0,0,579,178,1,0,0,0,580,583,3,175,87,0,581,583,5,95,0,0,582,580,1,0,0,0,
	582,581,1,0,0,0,583,180,1,0,0,0,584,585,5,48,0,0,585,586,7,5,0,0,586,587,
	3,183,91,0,587,182,1,0,0,0,588,593,3,185,92,0,589,591,3,187,93,0,590,589,
	1,0,0,0,590,591,1,0,0,0,591,592,1,0,0,0,592,594,3,185,92,0,593,590,1,0,
	0,0,593,594,1,0,0,0,594,184,1,0,0,0,595,596,7,6,0,0,596,186,1,0,0,0,597,
	599,3,189,94,0,598,597,1,0,0,0,599,600,1,0,0,0,600,598,1,0,0,0,600,601,
	1,0,0,0,601,188,1,0,0,0,602,605,3,185,92,0,603,605,5,95,0,0,604,602,1,0,
	0,0,604,603,1,0,0,0,605,190,1,0,0,0,606,609,3,193,96,0,607,609,3,205,102,
	0,608,606,1,0,0,0,608,607,1,0,0,0,609,192,1,0,0,0,610,611,3,149,74,0,611,
	613,5,46,0,0,612,614,3,149,74,0,613,612,1,0,0,0,613,614,1,0,0,0,614,616,
	1,0,0,0,615,617,3,195,97,0,616,615,1,0,0,0,616,617,1,0,0,0,617,619,1,0,
	0,0,618,620,3,203,101,0,619,618,1,0,0,0,619,620,1,0,0,0,620,638,1,0,0,0,
	621,622,5,46,0,0,622,624,3,149,74,0,623,625,3,195,97,0,624,623,1,0,0,0,
	624,625,1,0,0,0,625,627,1,0,0,0,626,628,3,203,101,0,627,626,1,0,0,0,627,
	628,1,0,0,0,628,638,1,0,0,0,629,630,3,149,74,0,630,632,3,195,97,0,631,633,
	3,203,101,0,632,631,1,0,0,0,632,633,1,0,0,0,633,638,1,0,0,0,634,635,3,149,
	74,0,635,636,3,203,101,0,636,638,1,0,0,0,637,610,1,0,0,0,637,621,1,0,0,
	0,637,629,1,0,0,0,637,634,1,0,0,0,638,194,1,0,0,0,639,640,3,197,98,0,640,
	641,3,199,99,0,641,196,1,0,0,0,642,643,7,7,0,0,643,198,1,0,0,0,644,646,
	3,201,100,0,645,644,1,0,0,0,645,646,1,0,0,0,646,647,1,0,0,0,647,648,3,149,
	74,0,648,200,1,0,0,0,649,650,7,8,0,0,650,202,1,0,0,0,651,652,7,9,0,0,652,
	204,1,0,0,0,653,654,3,207,103,0,654,656,3,209,104,0,655,657,3,203,101,0,
	656,655,1,0,0,0,656,657,1,0,0,0,657,206,1,0,0,0,658,660,3,161,80,0,659,
	661,5,46,0,0,660,659,1,0,0,0,660,661,1,0,0,0,661,670,1,0,0,0,662,663,5,
	48,0,0,663,665,7,2,0,0,664,666,3,163,81,0,665,664,1,0,0,0,665,666,1,0,0,
	0,666,667,1,0,0,0,667,668,5,46,0,0,668,670,3,163,81,0,669,658,1,0,0,0,669,
	662,1,0,0,0,670,208,1,0,0,0,671,672,3,211,105,0,672,673,3,199,99,0,673,
	210,1,0,0,0,674,675,7,10,0,0,675,212,1,0,0,0,676,677,5,116,0,0,677,678,
	5,114,0,0,678,679,5,117,0,0,679,686,5,101,0,0,680,681,5,102,0,0,681,682,
	5,97,0,0,682,683,5,108,0,0,683,684,5,115,0,0,684,686,5,101,0,0,685,676,
	1,0,0,0,685,680,1,0,0,0,686,214,1,0,0,0,687,688,5,39,0,0,688,689,3,217,
	108,0,689,690,5,39,0,0,690,696,1,0,0,0,691,692,5,39,0,0,692,693,3,225,112,
	0,693,694,5,39,0,0,694,696,1,0,0,0,695,687,1,0,0,0,695,691,1,0,0,0,696,
	216,1,0,0,0,697,698,8,11,0,0,698,218,1,0,0,0,699,701,5,34,0,0,700,702,3,
	221,110,0,701,700,1,0,0,0,701,702,1,0,0,0,702,703,1,0,0,0,703,704,5,34,
	0,0,704,220,1,0,0,0,705,707,3,223,111,0,706,705,1,0,0,0,707,708,1,0,0,0,
	708,706,1,0,0,0,708,709,1,0,0,0,709,222,1,0,0,0,710,713,8,12,0,0,711,713,
	3,225,112,0,712,710,1,0,0,0,712,711,1,0,0,0,713,224,1,0,0,0,714,715,5,92,
	0,0,715,719,7,13,0,0,716,719,3,227,113,0,717,719,3,231,115,0,718,714,1,
	0,0,0,718,716,1,0,0,0,718,717,1,0,0,0,719,226,1,0,0,0,720,721,5,92,0,0,
	721,732,3,175,87,0,722,723,5,92,0,0,723,724,3,175,87,0,724,725,3,175,87,
	0,725,732,1,0,0,0,726,727,5,92,0,0,727,728,3,229,114,0,728,729,3,175,87,
	0,729,730,3,175,87,0,730,732,1,0,0,0,731,720,1,0,0,0,731,722,1,0,0,0,731,
	726,1,0,0,0,732,228,1,0,0,0,733,734,7,14,0,0,734,230,1,0,0,0,735,737,5,
	92,0,0,736,738,5,117,0,0,737,736,1,0,0,0,738,739,1,0,0,0,739,737,1,0,0,
	0,739,740,1,0,0,0,740,741,1,0,0,0,741,742,3,165,82,0,742,743,3,165,82,0,
	743,744,3,165,82,0,744,745,3,165,82,0,745,232,1,0,0,0,746,747,5,110,0,0,
	747,748,5,117,0,0,748,749,5,108,0,0,749,750,5,108,0,0,750,234,1,0,0,0,751,
	755,3,237,118,0,752,754,3,239,119,0,753,752,1,0,0,0,754,757,1,0,0,0,755,
	753,1,0,0,0,755,756,1,0,0,0,756,236,1,0,0,0,757,755,1,0,0,0,758,759,7,15,
	0,0,759,238,1,0,0,0,760,761,7,16,0,0,761,240,1,0,0,0,762,764,7,17,0,0,763,
	762,1,0,0,0,764,765,1,0,0,0,765,763,1,0,0,0,765,766,1,0,0,0,766,767,1,0,
	0,0,767,768,6,120,0,0,768,242,1,0,0,0,769,770,5,47,0,0,770,771,5,42,0,0,
	771,775,1,0,0,0,772,774,9,0,0,0,773,772,1,0,0,0,774,777,1,0,0,0,775,776,
	1,0,0,0,775,773,1,0,0,0,776,778,1,0,0,0,777,775,1,0,0,0,778,779,5,42,0,
	0,779,780,5,47,0,0,780,781,1,0,0,0,781,782,6,121,1,0,782,244,1,0,0,0,783,
	784,5,47,0,0,784,785,5,47,0,0,785,789,1,0,0,0,786,788,8,18,0,0,787,786,
	1,0,0,0,788,791,1,0,0,0,789,787,1,0,0,0,789,790,1,0,0,0,790,792,1,0,0,0,
	791,789,1,0,0,0,792,793,6,122,1,0,793,246,1,0,0,0,53,0,479,483,487,491,
	495,502,507,509,513,516,520,527,531,536,544,547,554,558,562,568,571,578,
	582,590,593,600,604,608,613,616,619,624,627,632,637,645,656,660,665,669,
	685,695,701,708,712,718,731,739,755,765,775,789,2,6,0,0,0,1,0];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!ComposeLexer.__ATN) {
			ComposeLexer.__ATN = new ATNDeserializer().deserialize(ComposeLexer._serializedATN);
		}

		return ComposeLexer.__ATN;
	}


	static DecisionsToDFA = ComposeLexer._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );
}