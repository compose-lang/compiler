// Generated from ComposeLexer.g4 by ANTLR 4.11.2-SNAPSHOT
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
import {
	ATN,
	ATNDeserializer,
	CharStream,
	DecisionState, DFA,
	Lexer,
	LexerATNSimulator,
	RuleContext,
	PredictionContextCache,
	Token
} from "antlr4";
export default class ComposeLexer extends Lexer {
	public static readonly I32 = 1;
	public static readonly I64 = 2;
	public static readonly ISIZE = 3;
	public static readonly U32 = 4;
	public static readonly U64 = 5;
	public static readonly USIZE = 6;
	public static readonly F32 = 7;
	public static readonly F64 = 8;
	public static readonly V128 = 9;
	public static readonly STRING = 10;
	public static readonly BOOLEAN = 11;
	public static readonly VOID = 12;
	public static readonly ATTRIBUTE = 13;
	public static readonly ABSTRACT = 14;
	public static readonly CLASS = 15;
	public static readonly EXTENDS = 16;
	public static readonly STATIC = 17;
	public static readonly FUNCTION = 18;
	public static readonly LET = 19;
	public static readonly NEW = 20;
	public static readonly CONST = 21;
	public static readonly RETURN = 22;
	public static readonly IF = 23;
	public static readonly ELSE = 24;
	public static readonly SWITCH = 25;
	public static readonly CASE = 26;
	public static readonly FOR = 27;
	public static readonly DO = 28;
	public static readonly WHILE = 29;
	public static readonly BREAK = 30;
	public static readonly TRY = 31;
	public static readonly CATCH = 32;
	public static readonly THROW = 33;
	public static readonly FINALLY = 34;
	public static readonly THIS = 35;
	public static readonly SUPER = 36;
	public static readonly TYPE_OF = 37;
	public static readonly INSTANCE_OF = 38;
	public static readonly IN = 39;
	public static readonly AS = 40;
	public static readonly LPAR = 41;
	public static readonly RPAR = 42;
	public static readonly LBRAK = 43;
	public static readonly RBRAK = 44;
	public static readonly LCURL = 45;
	public static readonly RCURL = 46;
	public static readonly ARROW = 47;
	public static readonly GT = 48;
	public static readonly LT = 49;
	public static readonly LTE = 50;
	public static readonly GTE = 51;
	public static readonly EQUALS = 52;
	public static readonly NOT_EQUALS = 53;
	public static readonly NOT = 54;
	public static readonly AND = 55;
	public static readonly OR = 56;
	public static readonly QUESTION = 57;
	public static readonly SEMI = 58;
	public static readonly COLON = 59;
	public static readonly COMMA = 60;
	public static readonly ETC = 61;
	public static readonly DOT = 62;
	public static readonly AT = 63;
	public static readonly INC = 64;
	public static readonly DEC = 65;
	public static readonly PLUS = 66;
	public static readonly MINUS = 67;
	public static readonly STAR = 68;
	public static readonly SLASH = 69;
	public static readonly BSLASH = 70;
	public static readonly PERCENT = 71;
	public static readonly CARET = 72;
	public static readonly TILDE = 73;
	public static readonly AMP = 74;
	public static readonly PIPE = 75;
	public static readonly LSHIFT = 76;
	public static readonly RSHIFT = 77;
	public static readonly URSHIFT = 78;
	public static readonly ASSIGN = 79;
	public static readonly ADD_ASSIGN = 80;
	public static readonly SUB_ASSIGN = 81;
	public static readonly MUL_ASSIGN = 82;
	public static readonly DIV_ASSIGN = 83;
	public static readonly AND_ASSIGN = 84;
	public static readonly OR_ASSIGN = 85;
	public static readonly XOR_ASSIGN = 86;
	public static readonly MOD_ASSIGN = 87;
	public static readonly LSHIFT_ASSIGN = 88;
	public static readonly RSHIFT_ASSIGN = 89;
	public static readonly URSHIFT_ASSIGN = 90;
	public static readonly INTEGER_LITERAL = 91;
	public static readonly DECIMAL_LITERAL = 92;
	public static readonly BOOLEAN_LITERAL = 93;
	public static readonly CHAR_LITERAL = 94;
	public static readonly STRING_LITERAL = 95;
	public static readonly NULL_LITERAL = 96;
	public static readonly IDENTIFIER = 97;
	public static readonly ANNOTATION = 98;
	public static readonly WS = 99;
	public static readonly COMMENT = 100;
	public static readonly LINE_COMMENT = 101;
	public static readonly EOF = Token.EOF;

	public static readonly channelNames: string[] = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	public static readonly literalNames: string[] = [ null, "'i32'", "'i64'", 
                                                   "'isize'", "'u32'", "'u64'", 
                                                   "'usize'", "'f32'", "'f64'", 
                                                   "'v128'", "'string'", 
                                                   "'boolean'", "'void'", 
                                                   "'attribute'", "'abstract'", 
                                                   "'class'", "'extends'", 
                                                   "'static'", "'function'", 
                                                   "'let'", "'new'", "'const'", 
                                                   "'return'", "'if'", "'else'", 
                                                   "'switch'", "'case'", 
                                                   "'for'", "'do'", "'while'", 
                                                   "'break'", "'try'", "'catch'", 
                                                   "'throw'", "'finally'", 
                                                   "'this'", "'super'", 
                                                   "'typeof'", "'instanceof'", 
                                                   "'in'", "'as'", "'('", 
                                                   "')'", "'['", "']'", 
                                                   "'{'", "'}'", "'=>'", 
                                                   "'>'", "'<'", "'<='", 
                                                   "'>='", "'=='", "'!='", 
                                                   "'!'", "'&&'", "'||'", 
                                                   "'?'", "';'", "':'", 
                                                   "','", "'...'", "'.'", 
                                                   "'@'", "'++'", "'--'", 
                                                   "'+'", "'-'", "'*'", 
                                                   "'/'", "'\\'", "'%'", 
                                                   "'^'", "'~'", "'&'", 
                                                   "'|'", "'<<'", "'>>'", 
                                                   "'>>>'", "'='", "'+='", 
                                                   "'-='", "'*='", "'/='", 
                                                   "'&='", "'|='", "'^='", 
                                                   "'%='", "'<<='", "'>>='", 
                                                   "'>>>='", null, null, 
                                                   null, null, null, "'null'" ];
	public static readonly symbolicNames: string[] = [ null, "I32", "I64", 
                                                    "ISIZE", "U32", "U64", 
                                                    "USIZE", "F32", "F64", 
                                                    "V128", "STRING", "BOOLEAN", 
                                                    "VOID", "ATTRIBUTE", 
                                                    "ABSTRACT", "CLASS", 
                                                    "EXTENDS", "STATIC", 
                                                    "FUNCTION", "LET", "NEW", 
                                                    "CONST", "RETURN", "IF", 
                                                    "ELSE", "SWITCH", "CASE", 
                                                    "FOR", "DO", "WHILE", 
                                                    "BREAK", "TRY", "CATCH", 
                                                    "THROW", "FINALLY", 
                                                    "THIS", "SUPER", "TYPE_OF", 
                                                    "INSTANCE_OF", "IN", 
                                                    "AS", "LPAR", "RPAR", 
                                                    "LBRAK", "RBRAK", "LCURL", 
                                                    "RCURL", "ARROW", "GT", 
                                                    "LT", "LTE", "GTE", 
                                                    "EQUALS", "NOT_EQUALS", 
                                                    "NOT", "AND", "OR", 
                                                    "QUESTION", "SEMI", 
                                                    "COLON", "COMMA", "ETC", 
                                                    "DOT", "AT", "INC", 
                                                    "DEC", "PLUS", "MINUS", 
                                                    "STAR", "SLASH", "BSLASH", 
                                                    "PERCENT", "CARET", 
                                                    "TILDE", "AMP", "PIPE", 
                                                    "LSHIFT", "RSHIFT", 
                                                    "URSHIFT", "ASSIGN", 
                                                    "ADD_ASSIGN", "SUB_ASSIGN", 
                                                    "MUL_ASSIGN", "DIV_ASSIGN", 
                                                    "AND_ASSIGN", "OR_ASSIGN", 
                                                    "XOR_ASSIGN", "MOD_ASSIGN", 
                                                    "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", 
                                                    "URSHIFT_ASSIGN", "INTEGER_LITERAL", 
                                                    "DECIMAL_LITERAL", "BOOLEAN_LITERAL", 
                                                    "CHAR_LITERAL", "STRING_LITERAL", 
                                                    "NULL_LITERAL", "IDENTIFIER", 
                                                    "ANNOTATION", "WS", 
                                                    "COMMENT", "LINE_COMMENT" ];
	public static readonly modeNames: string[] = [ "DEFAULT_MODE", ];

	public static readonly ruleNames: string[] = [
		"I32", "I64", "ISIZE", "U32", "U64", "USIZE", "F32", "F64", "V128", "STRING", 
		"BOOLEAN", "VOID", "ATTRIBUTE", "ABSTRACT", "CLASS", "EXTENDS", "STATIC", 
		"FUNCTION", "LET", "NEW", "CONST", "RETURN", "IF", "ELSE", "SWITCH", "CASE", 
		"FOR", "DO", "WHILE", "BREAK", "TRY", "CATCH", "THROW", "FINALLY", "THIS", 
		"SUPER", "TYPE_OF", "INSTANCE_OF", "IN", "AS", "LPAR", "RPAR", "LBRAK", 
		"RBRAK", "LCURL", "RCURL", "ARROW", "GT", "LT", "LTE", "GTE", "EQUALS", 
		"NOT_EQUALS", "NOT", "AND", "OR", "QUESTION", "SEMI", "COLON", "COMMA", 
		"ETC", "DOT", "AT", "INC", "DEC", "PLUS", "MINUS", "STAR", "SLASH", "BSLASH", 
		"PERCENT", "CARET", "TILDE", "AMP", "PIPE", "LSHIFT", "RSHIFT", "URSHIFT", 
		"ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", 
		"OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", 
		"URSHIFT_ASSIGN", "INTEGER_LITERAL", "DecimalIntegerLiteral", "HexIntegerLiteral", 
		"OctalIntegerLiteral", "BinaryIntegerLiteral", "IntegerTypeSuffix", "DecimalNumeral", 
		"Digits", "Digit", "NonZeroDigit", "DigitsAndUnderscores", "DigitOrUnderscore", 
		"Underscores", "HexNumeral", "HexDigits", "HexDigit", "HexDigitsAndUnderscores", 
		"HexDigitOrUnderscore", "OctalNumeral", "OctalDigits", "OctalDigit", "OctalDigitsAndUnderscores", 
		"OctalDigitOrUnderscore", "BinaryNumeral", "BinaryDigits", "BinaryDigit", 
		"BinaryDigitsAndUnderscores", "BinaryDigitOrUnderscore", "DECIMAL_LITERAL", 
		"DecimalFloatingPointLiteral", "ExponentPart", "ExponentIndicator", "SignedInteger", 
		"Sign", "FloatTypeSuffix", "HexadecimalFloatingPointLiteral", "HexSignificand", 
		"BinaryExponent", "BinaryExponentIndicator", "BOOLEAN_LITERAL", "CHAR_LITERAL", 
		"SingleCharacter", "STRING_LITERAL", "StringCharacters", "StringCharacter", 
		"EscapeSequence", "OctalEscape", "ZeroToThree", "UnicodeEscape", "NULL_LITERAL", 
		"IDENTIFIER", "Letter", "LetterOrDigit", "ANNOTATION", "WS", "COMMENT", 
		"LINE_COMMENT",
	];


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(this, ComposeLexer._ATN, ComposeLexer.DecisionsToDFA, new PredictionContextCache());
	}

	public get grammarFileName(): string { return "ComposeLexer.g4"; }

	public get literalNames(): (string | null)[] { return ComposeLexer.literalNames; }
	public get symbolicNames(): (string | null)[] { return ComposeLexer.symbolicNames; }
	public get ruleNames(): string[] { return ComposeLexer.ruleNames; }

	public get serializedATN(): number[] { return ComposeLexer._serializedATN; }

	public get channelNames(): string[] { return ComposeLexer.channelNames; }

	public get modeNames(): string[] { return ComposeLexer.modeNames; }

	public static readonly _serializedATN: number[] = [4,0,101,976,6,-1,2,0,
	7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,
	7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,
	16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,
	2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,
	31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,
	7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
	45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
	2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,
	60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,
	7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,
	74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,
	2,82,7,82,2,83,7,83,2,84,7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,
	89,7,89,2,90,7,90,2,91,7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,
	7,96,2,97,7,97,2,98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,
	2,103,7,103,2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,
	2,109,7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
	2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,
	2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,
	2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,
	2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,
	2,139,7,139,2,140,7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,
	2,145,7,145,2,146,7,146,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,
	1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,
	1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
	1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,
	12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,
	1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,
	15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,
	1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,
	20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,23,
	1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,
	25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,
	1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,
	31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
	1,33,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,
	36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
	1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,
	43,1,44,1,44,1,45,1,45,1,46,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,49,
	1,50,1,50,1,50,1,51,1,51,1,51,1,52,1,52,1,52,1,53,1,53,1,54,1,54,1,54,1,
	55,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,60,1,60,1,60,
	1,61,1,61,1,62,1,62,1,63,1,63,1,63,1,64,1,64,1,64,1,65,1,65,1,66,1,66,1,
	67,1,67,1,68,1,68,1,69,1,69,1,70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,74,
	1,74,1,75,1,75,1,75,1,76,1,76,1,76,1,77,1,77,1,77,1,77,1,78,1,78,1,79,1,
	79,1,79,1,80,1,80,1,80,1,81,1,81,1,81,1,82,1,82,1,82,1,83,1,83,1,83,1,84,
	1,84,1,84,1,85,1,85,1,85,1,86,1,86,1,86,1,87,1,87,1,87,1,87,1,88,1,88,1,
	88,1,88,1,89,1,89,1,89,1,89,1,89,1,90,1,90,1,90,1,90,3,90,659,8,90,1,91,
	1,91,3,91,663,8,91,1,92,1,92,3,92,667,8,92,1,93,1,93,3,93,671,8,93,1,94,
	1,94,3,94,675,8,94,1,95,1,95,1,96,1,96,1,96,3,96,682,8,96,1,96,1,96,1,96,
	3,96,687,8,96,3,96,689,8,96,1,97,1,97,3,97,693,8,97,1,97,3,97,696,8,97,
	1,98,1,98,3,98,700,8,98,1,99,1,99,1,100,4,100,705,8,100,11,100,12,100,706,
	1,101,1,101,3,101,711,8,101,1,102,4,102,714,8,102,11,102,12,102,715,1,103,
	1,103,1,103,1,103,1,104,1,104,3,104,724,8,104,1,104,3,104,727,8,104,1,105,
	1,105,1,106,4,106,732,8,106,11,106,12,106,733,1,107,1,107,3,107,738,8,107,
	1,108,1,108,3,108,742,8,108,1,108,1,108,1,109,1,109,3,109,748,8,109,1,109,
	3,109,751,8,109,1,110,1,110,1,111,4,111,756,8,111,11,111,12,111,757,1,112,
	1,112,3,112,762,8,112,1,113,1,113,1,113,1,113,1,114,1,114,3,114,770,8,114,
	1,114,3,114,773,8,114,1,115,1,115,1,116,4,116,778,8,116,11,116,12,116,779,
	1,117,1,117,3,117,784,8,117,1,118,1,118,3,118,788,8,118,1,119,1,119,1,119,
	3,119,793,8,119,1,119,3,119,796,8,119,1,119,3,119,799,8,119,1,119,1,119,
	1,119,3,119,804,8,119,1,119,3,119,807,8,119,1,119,1,119,1,119,3,119,812,
	8,119,1,119,1,119,1,119,3,119,817,8,119,1,120,1,120,1,120,1,121,1,121,1,
	122,3,122,825,8,122,1,122,1,122,1,123,1,123,1,124,1,124,1,125,1,125,1,125,
	3,125,836,8,125,1,126,1,126,3,126,840,8,126,1,126,1,126,1,126,3,126,845,
	8,126,1,126,1,126,3,126,849,8,126,1,127,1,127,1,127,1,128,1,128,1,129,1,
	129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,3,129,865,8,129,1,130,1,130,
	1,130,1,130,1,130,1,130,1,130,1,130,3,130,875,8,130,1,131,1,131,1,132,1,
	132,3,132,881,8,132,1,132,1,132,1,133,4,133,886,8,133,11,133,12,133,887,
	1,134,1,134,3,134,892,8,134,1,135,1,135,1,135,1,135,3,135,898,8,135,1,136,
	1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,3,136,911,8,
	136,1,137,1,137,1,138,1,138,4,138,917,8,138,11,138,12,138,918,1,138,1,138,
	1,138,1,138,1,138,1,139,1,139,1,139,1,139,1,139,1,140,1,140,5,140,933,8,
	140,10,140,12,140,936,9,140,1,141,1,141,1,142,1,142,1,143,1,143,1,143,1,
	144,4,144,946,8,144,11,144,12,144,947,1,144,1,144,1,145,1,145,1,145,1,145,
	5,145,956,8,145,10,145,12,145,959,9,145,1,145,1,145,1,145,1,145,1,145,1,
	146,1,146,1,146,1,146,5,146,970,8,146,10,146,12,146,973,9,146,1,146,1,146,
	1,957,0,147,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
	13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
	25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,
	37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,
	49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,
	119,60,121,61,123,62,125,63,127,64,129,65,131,66,133,67,135,68,137,69,139,
	70,141,71,143,72,145,73,147,74,149,75,151,76,153,77,155,78,157,79,159,80,
	161,81,163,82,165,83,167,84,169,85,171,86,173,87,175,88,177,89,179,90,181,
	91,183,0,185,0,187,0,189,0,191,0,193,0,195,0,197,0,199,0,201,0,203,0,205,
	0,207,0,209,0,211,0,213,0,215,0,217,0,219,0,221,0,223,0,225,0,227,0,229,
	0,231,0,233,0,235,0,237,92,239,0,241,0,243,0,245,0,247,0,249,0,251,0,253,
	0,255,0,257,0,259,93,261,94,263,0,265,95,267,0,269,0,271,0,273,0,275,0,
	277,0,279,96,281,97,283,0,285,0,287,98,289,99,291,100,293,101,1,0,19,2,
	0,76,76,108,108,1,0,49,57,2,0,88,88,120,120,3,0,48,57,65,70,97,102,1,0,
	48,55,2,0,66,66,98,98,1,0,48,49,2,0,69,69,101,101,2,0,43,43,45,45,4,0,68,
	68,70,70,100,100,102,102,2,0,80,80,112,112,4,0,10,10,13,13,39,39,92,92,
	4,0,10,10,13,13,34,34,92,92,8,0,34,34,39,39,92,92,98,98,102,102,110,110,
	114,114,116,116,1,0,48,51,4,0,36,36,65,90,95,95,97,122,5,0,36,36,48,57,
	65,90,95,95,97,122,3,0,9,10,12,13,32,32,2,0,10,10,13,13,987,0,1,1,0,0,0,
	0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
	0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
	1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
	0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
	1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
	0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
	1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,
	0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,
	1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,
	0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,
	0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,
	123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,
	1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,
	0,0,0,0,145,1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,
	0,0,0,155,1,0,0,0,0,157,1,0,0,0,0,159,1,0,0,0,0,161,1,0,0,0,0,163,1,0,0,
	0,0,165,1,0,0,0,0,167,1,0,0,0,0,169,1,0,0,0,0,171,1,0,0,0,0,173,1,0,0,0,
	0,175,1,0,0,0,0,177,1,0,0,0,0,179,1,0,0,0,0,181,1,0,0,0,0,237,1,0,0,0,0,
	259,1,0,0,0,0,261,1,0,0,0,0,265,1,0,0,0,0,279,1,0,0,0,0,281,1,0,0,0,0,287,
	1,0,0,0,0,289,1,0,0,0,0,291,1,0,0,0,0,293,1,0,0,0,1,295,1,0,0,0,3,299,1,
	0,0,0,5,303,1,0,0,0,7,309,1,0,0,0,9,313,1,0,0,0,11,317,1,0,0,0,13,323,1,
	0,0,0,15,327,1,0,0,0,17,331,1,0,0,0,19,336,1,0,0,0,21,343,1,0,0,0,23,351,
	1,0,0,0,25,356,1,0,0,0,27,366,1,0,0,0,29,375,1,0,0,0,31,381,1,0,0,0,33,
	389,1,0,0,0,35,396,1,0,0,0,37,405,1,0,0,0,39,409,1,0,0,0,41,413,1,0,0,0,
	43,419,1,0,0,0,45,426,1,0,0,0,47,429,1,0,0,0,49,434,1,0,0,0,51,441,1,0,
	0,0,53,446,1,0,0,0,55,450,1,0,0,0,57,453,1,0,0,0,59,459,1,0,0,0,61,465,
	1,0,0,0,63,469,1,0,0,0,65,475,1,0,0,0,67,481,1,0,0,0,69,489,1,0,0,0,71,
	494,1,0,0,0,73,500,1,0,0,0,75,507,1,0,0,0,77,518,1,0,0,0,79,521,1,0,0,0,
	81,524,1,0,0,0,83,526,1,0,0,0,85,528,1,0,0,0,87,530,1,0,0,0,89,532,1,0,
	0,0,91,534,1,0,0,0,93,536,1,0,0,0,95,539,1,0,0,0,97,541,1,0,0,0,99,543,
	1,0,0,0,101,546,1,0,0,0,103,549,1,0,0,0,105,552,1,0,0,0,107,555,1,0,0,0,
	109,557,1,0,0,0,111,560,1,0,0,0,113,563,1,0,0,0,115,565,1,0,0,0,117,567,
	1,0,0,0,119,569,1,0,0,0,121,571,1,0,0,0,123,575,1,0,0,0,125,577,1,0,0,0,
	127,579,1,0,0,0,129,582,1,0,0,0,131,585,1,0,0,0,133,587,1,0,0,0,135,589,
	1,0,0,0,137,591,1,0,0,0,139,593,1,0,0,0,141,595,1,0,0,0,143,597,1,0,0,0,
	145,599,1,0,0,0,147,601,1,0,0,0,149,603,1,0,0,0,151,605,1,0,0,0,153,608,
	1,0,0,0,155,611,1,0,0,0,157,615,1,0,0,0,159,617,1,0,0,0,161,620,1,0,0,0,
	163,623,1,0,0,0,165,626,1,0,0,0,167,629,1,0,0,0,169,632,1,0,0,0,171,635,
	1,0,0,0,173,638,1,0,0,0,175,641,1,0,0,0,177,645,1,0,0,0,179,649,1,0,0,0,
	181,658,1,0,0,0,183,660,1,0,0,0,185,664,1,0,0,0,187,668,1,0,0,0,189,672,
	1,0,0,0,191,676,1,0,0,0,193,688,1,0,0,0,195,690,1,0,0,0,197,699,1,0,0,0,
	199,701,1,0,0,0,201,704,1,0,0,0,203,710,1,0,0,0,205,713,1,0,0,0,207,717,
	1,0,0,0,209,721,1,0,0,0,211,728,1,0,0,0,213,731,1,0,0,0,215,737,1,0,0,0,
	217,739,1,0,0,0,219,745,1,0,0,0,221,752,1,0,0,0,223,755,1,0,0,0,225,761,
	1,0,0,0,227,763,1,0,0,0,229,767,1,0,0,0,231,774,1,0,0,0,233,777,1,0,0,0,
	235,783,1,0,0,0,237,787,1,0,0,0,239,816,1,0,0,0,241,818,1,0,0,0,243,821,
	1,0,0,0,245,824,1,0,0,0,247,828,1,0,0,0,249,830,1,0,0,0,251,832,1,0,0,0,
	253,848,1,0,0,0,255,850,1,0,0,0,257,853,1,0,0,0,259,864,1,0,0,0,261,874,
	1,0,0,0,263,876,1,0,0,0,265,878,1,0,0,0,267,885,1,0,0,0,269,891,1,0,0,0,
	271,897,1,0,0,0,273,910,1,0,0,0,275,912,1,0,0,0,277,914,1,0,0,0,279,925,
	1,0,0,0,281,930,1,0,0,0,283,937,1,0,0,0,285,939,1,0,0,0,287,941,1,0,0,0,
	289,945,1,0,0,0,291,951,1,0,0,0,293,965,1,0,0,0,295,296,5,105,0,0,296,297,
	5,51,0,0,297,298,5,50,0,0,298,2,1,0,0,0,299,300,5,105,0,0,300,301,5,54,
	0,0,301,302,5,52,0,0,302,4,1,0,0,0,303,304,5,105,0,0,304,305,5,115,0,0,
	305,306,5,105,0,0,306,307,5,122,0,0,307,308,5,101,0,0,308,6,1,0,0,0,309,
	310,5,117,0,0,310,311,5,51,0,0,311,312,5,50,0,0,312,8,1,0,0,0,313,314,5,
	117,0,0,314,315,5,54,0,0,315,316,5,52,0,0,316,10,1,0,0,0,317,318,5,117,
	0,0,318,319,5,115,0,0,319,320,5,105,0,0,320,321,5,122,0,0,321,322,5,101,
	0,0,322,12,1,0,0,0,323,324,5,102,0,0,324,325,5,51,0,0,325,326,5,50,0,0,
	326,14,1,0,0,0,327,328,5,102,0,0,328,329,5,54,0,0,329,330,5,52,0,0,330,
	16,1,0,0,0,331,332,5,118,0,0,332,333,5,49,0,0,333,334,5,50,0,0,334,335,
	5,56,0,0,335,18,1,0,0,0,336,337,5,115,0,0,337,338,5,116,0,0,338,339,5,114,
	0,0,339,340,5,105,0,0,340,341,5,110,0,0,341,342,5,103,0,0,342,20,1,0,0,
	0,343,344,5,98,0,0,344,345,5,111,0,0,345,346,5,111,0,0,346,347,5,108,0,
	0,347,348,5,101,0,0,348,349,5,97,0,0,349,350,5,110,0,0,350,22,1,0,0,0,351,
	352,5,118,0,0,352,353,5,111,0,0,353,354,5,105,0,0,354,355,5,100,0,0,355,
	24,1,0,0,0,356,357,5,97,0,0,357,358,5,116,0,0,358,359,5,116,0,0,359,360,
	5,114,0,0,360,361,5,105,0,0,361,362,5,98,0,0,362,363,5,117,0,0,363,364,
	5,116,0,0,364,365,5,101,0,0,365,26,1,0,0,0,366,367,5,97,0,0,367,368,5,98,
	0,0,368,369,5,115,0,0,369,370,5,116,0,0,370,371,5,114,0,0,371,372,5,97,
	0,0,372,373,5,99,0,0,373,374,5,116,0,0,374,28,1,0,0,0,375,376,5,99,0,0,
	376,377,5,108,0,0,377,378,5,97,0,0,378,379,5,115,0,0,379,380,5,115,0,0,
	380,30,1,0,0,0,381,382,5,101,0,0,382,383,5,120,0,0,383,384,5,116,0,0,384,
	385,5,101,0,0,385,386,5,110,0,0,386,387,5,100,0,0,387,388,5,115,0,0,388,
	32,1,0,0,0,389,390,5,115,0,0,390,391,5,116,0,0,391,392,5,97,0,0,392,393,
	5,116,0,0,393,394,5,105,0,0,394,395,5,99,0,0,395,34,1,0,0,0,396,397,5,102,
	0,0,397,398,5,117,0,0,398,399,5,110,0,0,399,400,5,99,0,0,400,401,5,116,
	0,0,401,402,5,105,0,0,402,403,5,111,0,0,403,404,5,110,0,0,404,36,1,0,0,
	0,405,406,5,108,0,0,406,407,5,101,0,0,407,408,5,116,0,0,408,38,1,0,0,0,
	409,410,5,110,0,0,410,411,5,101,0,0,411,412,5,119,0,0,412,40,1,0,0,0,413,
	414,5,99,0,0,414,415,5,111,0,0,415,416,5,110,0,0,416,417,5,115,0,0,417,
	418,5,116,0,0,418,42,1,0,0,0,419,420,5,114,0,0,420,421,5,101,0,0,421,422,
	5,116,0,0,422,423,5,117,0,0,423,424,5,114,0,0,424,425,5,110,0,0,425,44,
	1,0,0,0,426,427,5,105,0,0,427,428,5,102,0,0,428,46,1,0,0,0,429,430,5,101,
	0,0,430,431,5,108,0,0,431,432,5,115,0,0,432,433,5,101,0,0,433,48,1,0,0,
	0,434,435,5,115,0,0,435,436,5,119,0,0,436,437,5,105,0,0,437,438,5,116,0,
	0,438,439,5,99,0,0,439,440,5,104,0,0,440,50,1,0,0,0,441,442,5,99,0,0,442,
	443,5,97,0,0,443,444,5,115,0,0,444,445,5,101,0,0,445,52,1,0,0,0,446,447,
	5,102,0,0,447,448,5,111,0,0,448,449,5,114,0,0,449,54,1,0,0,0,450,451,5,
	100,0,0,451,452,5,111,0,0,452,56,1,0,0,0,453,454,5,119,0,0,454,455,5,104,
	0,0,455,456,5,105,0,0,456,457,5,108,0,0,457,458,5,101,0,0,458,58,1,0,0,
	0,459,460,5,98,0,0,460,461,5,114,0,0,461,462,5,101,0,0,462,463,5,97,0,0,
	463,464,5,107,0,0,464,60,1,0,0,0,465,466,5,116,0,0,466,467,5,114,0,0,467,
	468,5,121,0,0,468,62,1,0,0,0,469,470,5,99,0,0,470,471,5,97,0,0,471,472,
	5,116,0,0,472,473,5,99,0,0,473,474,5,104,0,0,474,64,1,0,0,0,475,476,5,116,
	0,0,476,477,5,104,0,0,477,478,5,114,0,0,478,479,5,111,0,0,479,480,5,119,
	0,0,480,66,1,0,0,0,481,482,5,102,0,0,482,483,5,105,0,0,483,484,5,110,0,
	0,484,485,5,97,0,0,485,486,5,108,0,0,486,487,5,108,0,0,487,488,5,121,0,
	0,488,68,1,0,0,0,489,490,5,116,0,0,490,491,5,104,0,0,491,492,5,105,0,0,
	492,493,5,115,0,0,493,70,1,0,0,0,494,495,5,115,0,0,495,496,5,117,0,0,496,
	497,5,112,0,0,497,498,5,101,0,0,498,499,5,114,0,0,499,72,1,0,0,0,500,501,
	5,116,0,0,501,502,5,121,0,0,502,503,5,112,0,0,503,504,5,101,0,0,504,505,
	5,111,0,0,505,506,5,102,0,0,506,74,1,0,0,0,507,508,5,105,0,0,508,509,5,
	110,0,0,509,510,5,115,0,0,510,511,5,116,0,0,511,512,5,97,0,0,512,513,5,
	110,0,0,513,514,5,99,0,0,514,515,5,101,0,0,515,516,5,111,0,0,516,517,5,
	102,0,0,517,76,1,0,0,0,518,519,5,105,0,0,519,520,5,110,0,0,520,78,1,0,0,
	0,521,522,5,97,0,0,522,523,5,115,0,0,523,80,1,0,0,0,524,525,5,40,0,0,525,
	82,1,0,0,0,526,527,5,41,0,0,527,84,1,0,0,0,528,529,5,91,0,0,529,86,1,0,
	0,0,530,531,5,93,0,0,531,88,1,0,0,0,532,533,5,123,0,0,533,90,1,0,0,0,534,
	535,5,125,0,0,535,92,1,0,0,0,536,537,5,61,0,0,537,538,5,62,0,0,538,94,1,
	0,0,0,539,540,5,62,0,0,540,96,1,0,0,0,541,542,5,60,0,0,542,98,1,0,0,0,543,
	544,5,60,0,0,544,545,5,61,0,0,545,100,1,0,0,0,546,547,5,62,0,0,547,548,
	5,61,0,0,548,102,1,0,0,0,549,550,5,61,0,0,550,551,5,61,0,0,551,104,1,0,
	0,0,552,553,5,33,0,0,553,554,5,61,0,0,554,106,1,0,0,0,555,556,5,33,0,0,
	556,108,1,0,0,0,557,558,5,38,0,0,558,559,5,38,0,0,559,110,1,0,0,0,560,561,
	5,124,0,0,561,562,5,124,0,0,562,112,1,0,0,0,563,564,5,63,0,0,564,114,1,
	0,0,0,565,566,5,59,0,0,566,116,1,0,0,0,567,568,5,58,0,0,568,118,1,0,0,0,
	569,570,5,44,0,0,570,120,1,0,0,0,571,572,5,46,0,0,572,573,5,46,0,0,573,
	574,5,46,0,0,574,122,1,0,0,0,575,576,5,46,0,0,576,124,1,0,0,0,577,578,5,
	64,0,0,578,126,1,0,0,0,579,580,5,43,0,0,580,581,5,43,0,0,581,128,1,0,0,
	0,582,583,5,45,0,0,583,584,5,45,0,0,584,130,1,0,0,0,585,586,5,43,0,0,586,
	132,1,0,0,0,587,588,5,45,0,0,588,134,1,0,0,0,589,590,5,42,0,0,590,136,1,
	0,0,0,591,592,5,47,0,0,592,138,1,0,0,0,593,594,5,92,0,0,594,140,1,0,0,0,
	595,596,5,37,0,0,596,142,1,0,0,0,597,598,5,94,0,0,598,144,1,0,0,0,599,600,
	5,126,0,0,600,146,1,0,0,0,601,602,5,38,0,0,602,148,1,0,0,0,603,604,5,124,
	0,0,604,150,1,0,0,0,605,606,5,60,0,0,606,607,5,60,0,0,607,152,1,0,0,0,608,
	609,5,62,0,0,609,610,5,62,0,0,610,154,1,0,0,0,611,612,5,62,0,0,612,613,
	5,62,0,0,613,614,5,62,0,0,614,156,1,0,0,0,615,616,5,61,0,0,616,158,1,0,
	0,0,617,618,5,43,0,0,618,619,5,61,0,0,619,160,1,0,0,0,620,621,5,45,0,0,
	621,622,5,61,0,0,622,162,1,0,0,0,623,624,5,42,0,0,624,625,5,61,0,0,625,
	164,1,0,0,0,626,627,5,47,0,0,627,628,5,61,0,0,628,166,1,0,0,0,629,630,5,
	38,0,0,630,631,5,61,0,0,631,168,1,0,0,0,632,633,5,124,0,0,633,634,5,61,
	0,0,634,170,1,0,0,0,635,636,5,94,0,0,636,637,5,61,0,0,637,172,1,0,0,0,638,
	639,5,37,0,0,639,640,5,61,0,0,640,174,1,0,0,0,641,642,5,60,0,0,642,643,
	5,60,0,0,643,644,5,61,0,0,644,176,1,0,0,0,645,646,5,62,0,0,646,647,5,62,
	0,0,647,648,5,61,0,0,648,178,1,0,0,0,649,650,5,62,0,0,650,651,5,62,0,0,
	651,652,5,62,0,0,652,653,5,61,0,0,653,180,1,0,0,0,654,659,3,183,91,0,655,
	659,3,185,92,0,656,659,3,187,93,0,657,659,3,189,94,0,658,654,1,0,0,0,658,
	655,1,0,0,0,658,656,1,0,0,0,658,657,1,0,0,0,659,182,1,0,0,0,660,662,3,193,
	96,0,661,663,3,191,95,0,662,661,1,0,0,0,662,663,1,0,0,0,663,184,1,0,0,0,
	664,666,3,207,103,0,665,667,3,191,95,0,666,665,1,0,0,0,666,667,1,0,0,0,
	667,186,1,0,0,0,668,670,3,217,108,0,669,671,3,191,95,0,670,669,1,0,0,0,
	670,671,1,0,0,0,671,188,1,0,0,0,672,674,3,227,113,0,673,675,3,191,95,0,
	674,673,1,0,0,0,674,675,1,0,0,0,675,190,1,0,0,0,676,677,7,0,0,0,677,192,
	1,0,0,0,678,689,5,48,0,0,679,686,3,199,99,0,680,682,3,195,97,0,681,680,
	1,0,0,0,681,682,1,0,0,0,682,687,1,0,0,0,683,684,3,205,102,0,684,685,3,195,
	97,0,685,687,1,0,0,0,686,681,1,0,0,0,686,683,1,0,0,0,687,689,1,0,0,0,688,
	678,1,0,0,0,688,679,1,0,0,0,689,194,1,0,0,0,690,695,3,197,98,0,691,693,
	3,201,100,0,692,691,1,0,0,0,692,693,1,0,0,0,693,694,1,0,0,0,694,696,3,197,
	98,0,695,692,1,0,0,0,695,696,1,0,0,0,696,196,1,0,0,0,697,700,5,48,0,0,698,
	700,3,199,99,0,699,697,1,0,0,0,699,698,1,0,0,0,700,198,1,0,0,0,701,702,
	7,1,0,0,702,200,1,0,0,0,703,705,3,203,101,0,704,703,1,0,0,0,705,706,1,0,
	0,0,706,704,1,0,0,0,706,707,1,0,0,0,707,202,1,0,0,0,708,711,3,197,98,0,
	709,711,5,95,0,0,710,708,1,0,0,0,710,709,1,0,0,0,711,204,1,0,0,0,712,714,
	5,95,0,0,713,712,1,0,0,0,714,715,1,0,0,0,715,713,1,0,0,0,715,716,1,0,0,
	0,716,206,1,0,0,0,717,718,5,48,0,0,718,719,7,2,0,0,719,720,3,209,104,0,
	720,208,1,0,0,0,721,726,3,211,105,0,722,724,3,213,106,0,723,722,1,0,0,0,
	723,724,1,0,0,0,724,725,1,0,0,0,725,727,3,211,105,0,726,723,1,0,0,0,726,
	727,1,0,0,0,727,210,1,0,0,0,728,729,7,3,0,0,729,212,1,0,0,0,730,732,3,215,
	107,0,731,730,1,0,0,0,732,733,1,0,0,0,733,731,1,0,0,0,733,734,1,0,0,0,734,
	214,1,0,0,0,735,738,3,211,105,0,736,738,5,95,0,0,737,735,1,0,0,0,737,736,
	1,0,0,0,738,216,1,0,0,0,739,741,5,48,0,0,740,742,3,205,102,0,741,740,1,
	0,0,0,741,742,1,0,0,0,742,743,1,0,0,0,743,744,3,219,109,0,744,218,1,0,0,
	0,745,750,3,221,110,0,746,748,3,223,111,0,747,746,1,0,0,0,747,748,1,0,0,
	0,748,749,1,0,0,0,749,751,3,221,110,0,750,747,1,0,0,0,750,751,1,0,0,0,751,
	220,1,0,0,0,752,753,7,4,0,0,753,222,1,0,0,0,754,756,3,225,112,0,755,754,
	1,0,0,0,756,757,1,0,0,0,757,755,1,0,0,0,757,758,1,0,0,0,758,224,1,0,0,0,
	759,762,3,221,110,0,760,762,5,95,0,0,761,759,1,0,0,0,761,760,1,0,0,0,762,
	226,1,0,0,0,763,764,5,48,0,0,764,765,7,5,0,0,765,766,3,229,114,0,766,228,
	1,0,0,0,767,772,3,231,115,0,768,770,3,233,116,0,769,768,1,0,0,0,769,770,
	1,0,0,0,770,771,1,0,0,0,771,773,3,231,115,0,772,769,1,0,0,0,772,773,1,0,
	0,0,773,230,1,0,0,0,774,775,7,6,0,0,775,232,1,0,0,0,776,778,3,235,117,0,
	777,776,1,0,0,0,778,779,1,0,0,0,779,777,1,0,0,0,779,780,1,0,0,0,780,234,
	1,0,0,0,781,784,3,231,115,0,782,784,5,95,0,0,783,781,1,0,0,0,783,782,1,
	0,0,0,784,236,1,0,0,0,785,788,3,239,119,0,786,788,3,251,125,0,787,785,1,
	0,0,0,787,786,1,0,0,0,788,238,1,0,0,0,789,790,3,195,97,0,790,792,5,46,0,
	0,791,793,3,195,97,0,792,791,1,0,0,0,792,793,1,0,0,0,793,795,1,0,0,0,794,
	796,3,241,120,0,795,794,1,0,0,0,795,796,1,0,0,0,796,798,1,0,0,0,797,799,
	3,249,124,0,798,797,1,0,0,0,798,799,1,0,0,0,799,817,1,0,0,0,800,801,5,46,
	0,0,801,803,3,195,97,0,802,804,3,241,120,0,803,802,1,0,0,0,803,804,1,0,
	0,0,804,806,1,0,0,0,805,807,3,249,124,0,806,805,1,0,0,0,806,807,1,0,0,0,
	807,817,1,0,0,0,808,809,3,195,97,0,809,811,3,241,120,0,810,812,3,249,124,
	0,811,810,1,0,0,0,811,812,1,0,0,0,812,817,1,0,0,0,813,814,3,195,97,0,814,
	815,3,249,124,0,815,817,1,0,0,0,816,789,1,0,0,0,816,800,1,0,0,0,816,808,
	1,0,0,0,816,813,1,0,0,0,817,240,1,0,0,0,818,819,3,243,121,0,819,820,3,245,
	122,0,820,242,1,0,0,0,821,822,7,7,0,0,822,244,1,0,0,0,823,825,3,247,123,
	0,824,823,1,0,0,0,824,825,1,0,0,0,825,826,1,0,0,0,826,827,3,195,97,0,827,
	246,1,0,0,0,828,829,7,8,0,0,829,248,1,0,0,0,830,831,7,9,0,0,831,250,1,0,
	0,0,832,833,3,253,126,0,833,835,3,255,127,0,834,836,3,249,124,0,835,834,
	1,0,0,0,835,836,1,0,0,0,836,252,1,0,0,0,837,839,3,207,103,0,838,840,5,46,
	0,0,839,838,1,0,0,0,839,840,1,0,0,0,840,849,1,0,0,0,841,842,5,48,0,0,842,
	844,7,2,0,0,843,845,3,209,104,0,844,843,1,0,0,0,844,845,1,0,0,0,845,846,
	1,0,0,0,846,847,5,46,0,0,847,849,3,209,104,0,848,837,1,0,0,0,848,841,1,
	0,0,0,849,254,1,0,0,0,850,851,3,257,128,0,851,852,3,245,122,0,852,256,1,
	0,0,0,853,854,7,10,0,0,854,258,1,0,0,0,855,856,5,116,0,0,856,857,5,114,
	0,0,857,858,5,117,0,0,858,865,5,101,0,0,859,860,5,102,0,0,860,861,5,97,
	0,0,861,862,5,108,0,0,862,863,5,115,0,0,863,865,5,101,0,0,864,855,1,0,0,
	0,864,859,1,0,0,0,865,260,1,0,0,0,866,867,5,39,0,0,867,868,3,263,131,0,
	868,869,5,39,0,0,869,875,1,0,0,0,870,871,5,39,0,0,871,872,3,271,135,0,872,
	873,5,39,0,0,873,875,1,0,0,0,874,866,1,0,0,0,874,870,1,0,0,0,875,262,1,
	0,0,0,876,877,8,11,0,0,877,264,1,0,0,0,878,880,5,34,0,0,879,881,3,267,133,
	0,880,879,1,0,0,0,880,881,1,0,0,0,881,882,1,0,0,0,882,883,5,34,0,0,883,
	266,1,0,0,0,884,886,3,269,134,0,885,884,1,0,0,0,886,887,1,0,0,0,887,885,
	1,0,0,0,887,888,1,0,0,0,888,268,1,0,0,0,889,892,8,12,0,0,890,892,3,271,
	135,0,891,889,1,0,0,0,891,890,1,0,0,0,892,270,1,0,0,0,893,894,5,92,0,0,
	894,898,7,13,0,0,895,898,3,273,136,0,896,898,3,277,138,0,897,893,1,0,0,
	0,897,895,1,0,0,0,897,896,1,0,0,0,898,272,1,0,0,0,899,900,5,92,0,0,900,
	911,3,221,110,0,901,902,5,92,0,0,902,903,3,221,110,0,903,904,3,221,110,
	0,904,911,1,0,0,0,905,906,5,92,0,0,906,907,3,275,137,0,907,908,3,221,110,
	0,908,909,3,221,110,0,909,911,1,0,0,0,910,899,1,0,0,0,910,901,1,0,0,0,910,
	905,1,0,0,0,911,274,1,0,0,0,912,913,7,14,0,0,913,276,1,0,0,0,914,916,5,
	92,0,0,915,917,5,117,0,0,916,915,1,0,0,0,917,918,1,0,0,0,918,916,1,0,0,
	0,918,919,1,0,0,0,919,920,1,0,0,0,920,921,3,211,105,0,921,922,3,211,105,
	0,922,923,3,211,105,0,923,924,3,211,105,0,924,278,1,0,0,0,925,926,5,110,
	0,0,926,927,5,117,0,0,927,928,5,108,0,0,928,929,5,108,0,0,929,280,1,0,0,
	0,930,934,3,283,141,0,931,933,3,285,142,0,932,931,1,0,0,0,933,936,1,0,0,
	0,934,932,1,0,0,0,934,935,1,0,0,0,935,282,1,0,0,0,936,934,1,0,0,0,937,938,
	7,15,0,0,938,284,1,0,0,0,939,940,7,16,0,0,940,286,1,0,0,0,941,942,5,64,
	0,0,942,943,3,281,140,0,943,288,1,0,0,0,944,946,7,17,0,0,945,944,1,0,0,
	0,946,947,1,0,0,0,947,945,1,0,0,0,947,948,1,0,0,0,948,949,1,0,0,0,949,950,
	6,144,0,0,950,290,1,0,0,0,951,952,5,47,0,0,952,953,5,42,0,0,953,957,1,0,
	0,0,954,956,9,0,0,0,955,954,1,0,0,0,956,959,1,0,0,0,957,958,1,0,0,0,957,
	955,1,0,0,0,958,960,1,0,0,0,959,957,1,0,0,0,960,961,5,42,0,0,961,962,5,
	47,0,0,962,963,1,0,0,0,963,964,6,145,1,0,964,292,1,0,0,0,965,966,5,47,0,
	0,966,967,5,47,0,0,967,971,1,0,0,0,968,970,8,18,0,0,969,968,1,0,0,0,970,
	973,1,0,0,0,971,969,1,0,0,0,971,972,1,0,0,0,972,974,1,0,0,0,973,971,1,0,
	0,0,974,975,6,146,1,0,975,294,1,0,0,0,53,0,658,662,666,670,674,681,686,
	688,692,695,699,706,710,715,723,726,733,737,741,747,750,757,761,769,772,
	779,783,787,792,795,798,803,806,811,816,824,835,839,844,848,864,874,880,
	887,891,897,910,918,934,947,957,971,2,6,0,0,0,1,0];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!ComposeLexer.__ATN) {
			ComposeLexer.__ATN = new ATNDeserializer().deserialize(ComposeLexer._serializedATN);
		}

		return ComposeLexer.__ATN;
	}


	static DecisionsToDFA = ComposeLexer._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );
}