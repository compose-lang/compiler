// Alignment guarantees

export const AL_BITS: u32 = 4; // 16 bytes to fit up to v128
export const AL_SIZE: usize = 1 << <usize>AL_BITS;
export const AL_MASK: usize = AL_SIZE - 1;

// Extra debugging
#if DEBUG
export const DEBUG = true;
#else
export const DEBUG = false;
#endif
#if DEBUG
export const TRACE = true;
#else
export const TRACE = false;
#endif
#if ASC_RTRACE
export const RTRACE = true;
#else
export const RTRACE = false;
#endif
#if ASC_PROFILE
export const PROFILE = true;
#else
export const PROFILE = false;
#endif

// Memory manager

// ╒════════════ Memory manager block layout (32-bit) ═════════════╕
//    3                   2                   1
//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits
// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤
// │                           MM info                             │ -4
// ╞>ptr═══════════════════════════════════════════════════════════╡
// │                              ...                              │


export class BLOCK(mmInfo) {

    /** Memory manager info. */
    mmInfo: usize;

}

/** Overhead of a memory manager block. */

export const BLOCK_OVERHEAD: usize = offsetof(BLOCK);

/** Maximum size of a memory manager block's payload. */

export const BLOCK_MAXSIZE: usize = (1 << 30) - BLOCK_OVERHEAD;

// Garbage collector

// ╒══════════ Garbage collector object layout (32-bit) ═══════════╕
//    3                   2                   1
//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits
// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤
// │                     Memory manager block                      │ -20
// ╞═══════════════════════════════════════════════════════════════╡
// │                            GC info                            │ -16
// ├───────────────────────────────────────────────────────────────┤
// │                            GC info                            │ -12
// ├───────────────────────────────────────────────────────────────┤
// │                            RT id                              │ -8
// ├───────────────────────────────────────────────────────────────┤
// │                            RT size                            │ -4
// ╞>ptr═══════════════════════════════════════════════════════════╡
// │                              ...                              │


export class OBJECT extends BLOCK {

    /** Garbage collector info. */
    gcInfo: u32;
    /** Garbage collector info. */
    gcInfo2: u32;
    /** Runtime class id. */
    rtId: u32;
    /** Runtime object size. */
    rtSize: u32;

}

/** Overhead of a garbage collector object. Excludes memory manager block overhead. */

export const OBJECT_OVERHEAD: usize = (offsetof(OBJECT) - BLOCK_OVERHEAD + AL_MASK) & ~AL_MASK;

/** Maximum size of a garbage collector object's payload. */

export const OBJECT_MAXSIZE: usize = BLOCK_MAXSIZE - OBJECT_OVERHEAD;

/** Total of memory manager and garbage collector overhead. */

export const TOTAL_OVERHEAD: usize = BLOCK_OVERHEAD + OBJECT_OVERHEAD;
